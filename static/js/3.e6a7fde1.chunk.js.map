{"version":3,"sources":["../node_modules/n3/node_modules/readable-stream/errors-browser.js","../node_modules/n3/node_modules/readable-stream/lib/_stream_duplex.js","../node_modules/n3/src/IRIs.js","../node_modules/n3/src/N3Lexer.js","../node_modules/n3/node_modules/readable-stream/readable-browser.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","../node_modules/n3/node_modules/readable-stream/lib/_stream_readable.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/stream-browser.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/destroy.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/state.js","../node_modules/n3/node_modules/readable-stream/lib/_stream_writable.js","../node_modules/n3/node_modules/readable-stream/lib/_stream_transform.js","../node_modules/queue-microtask/index.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/buffer_list.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/async_iterator.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/from-browser.js","../node_modules/n3/node_modules/readable-stream/lib/_stream_passthrough.js","../node_modules/n3/node_modules/readable-stream/lib/internal/streams/pipeline.js","../node_modules/n3/src/N3Util.js","../node_modules/n3/src/N3DataFactory.js","../node_modules/n3/src/N3Parser.js","../node_modules/n3/src/N3Writer.js","../node_modules/n3/src/N3Store.js","../node_modules/n3/src/N3StreamParser.js","../node_modules/n3/src/N3StreamWriter.js"],"names":["codes","createErrorType","code","message","Base","Error","NodeError","_Base","subClass","superClass","arg1","arg2","arg3","call","this","getMessage","prototype","Object","create","constructor","__proto__","name","oneOf","expected","thing","Array","isArray","len","length","map","i","String","concat","slice","join","value","TypeError","actual","determiner","search","pos","msg","substr","replace","str","this_len","undefined","substring","endsWith","type","start","indexOf","includes","arg","module","exports","objectKeys","keys","obj","key","push","Duplex","Readable","require","Writable","v","method","options","allowHalfOpen","readable","writable","once","onend","_writableState","ended","process","nextTick","onEndNT","self","end","defineProperty","enumerable","get","highWaterMark","getBuffer","_readableState","destroyed","set","RDF","XSD","SWAP","xsd","decimal","boolean","double","integer","string","rdf","nil","first","rest","langString","owl","sameAs","r","forSome","forAll","log","implies","namespaces","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","RegExp","n3","_comments","comments","_literalClosingPos","callback","inputFinished","input","_input","outputComments","whiteSpaceMatch","comment","exec","line","_line","prefix","test","firstChar","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","_syntaxError","item","invalid","replaced","sequence","unicode4","unicode8","escapedChar","fromCharCode","Number","parseInt","charCode","opening","openingLength","closingPos","Math","max","backslashCount","raw","lines","split","issue","err","context","error","tokens","_tokenizeToEnd","e","t","queueMicrotask","_pendingBuffer","setEncoding","on","data","Buffer","Stream","Transform","PassThrough","finished","pipeline","ERR_STREAM_PREMATURE_CLOSE","noop","eos","stream","opts","called","_len","arguments","args","_key","apply","onlegacyfinish","onfinish","writableEnded","readableEnded","endEmitted","onerror","onclose","onrequest","req","setHeader","abort","isRequest","removeListener","ReadableState","EventEmitter","EElistenerCount","emitter","listeners","OurUint8Array","global","Uint8Array","debug","debugUtil","debuglog","StringDecoder","createReadableStreamAsyncIterator","from","BufferList","destroyImpl","getHighWaterMark","_require$codes","ERR_INVALID_ARG_TYPE","ERR_STREAM_PUSH_AFTER_EOF","ERR_METHOD_NOT_IMPLEMENTED","ERR_STREAM_UNSHIFT_AFTER_END_EVENT","errorOrDestroy","kProxyEvents","isDuplex","objectMode","readableObjectMode","buffer","pipes","pipesCount","flowing","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","paused","emitClose","autoDestroy","defaultEncoding","awaitDrain","readingMore","decoder","encoding","read","_read","destroy","_destroy","readableAddChunk","chunk","addToFront","skipChunkCheck","er","state","emitReadable","emitReadable_","onEofChunk","isBuffer","chunkInvalid","getPrototypeOf","_uint8ArrayToBuffer","addChunk","write","maybeReadMore","emit","unshift","_undestroy","undestroy","cb","isPaused","enc","p","head","content","next","clear","MAX_HWM","howMuchToRead","n","computeNewHighWaterMark","flow","maybeReadMore_","updateReadableListening","listenerCount","resume","nReadingNextTick","resume_","fromList","ret","shift","consume","endReadable","endReadableNT","wState","xs","x","l","nOrig","doRead","pipe","dest","pipeOpts","src","endFn","stdout","stderr","unpipe","onunpipe","unpipeInfo","hasUnpiped","ondrain","ondata","cleanedUp","needDrain","pipeOnDrain","pause","event","fn","prependListener","_events","dests","index","splice","ev","res","addListener","removeAllListeners","wrap","_this","bind","Symbol","asyncIterator","_fromList","iterable","emitErrorAndCloseNT","emitErrorNT","emitCloseNT","readableDestroyed","writableDestroyed","errorEmitted","ending","finalCalled","prefinished","rState","ERR_INVALID_OPT_VALUE","duplexKey","hwm","highWaterMarkFrom","isFinite","floor","CorkedRequest","entry","finish","corkReq","pendingcb","corkedRequestsFree","onCorkedFinish","WritableState","internalUtil","deprecate","realHasInstance","ERR_MULTIPLE_CALLBACK","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_DESTROYED","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","nop","writableObjectMode","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writecb","writelen","onwriteStateUpdate","finishMaybe","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","bufferedRequestCount","_write","writev","_writev","final","_final","doWrite","onwriteDrain","holder","count","allBuffers","isBuf","callFinal","need","prefinish","current","out","_","hasInstance","Function","object","writeAfterEnd","validChunk","newChunk","decodeChunk","last","writeOrBuffer","cork","uncork","setDefaultEncoding","toLowerCase","endWritable","ERR_TRANSFORM_ALREADY_TRANSFORMING","ERR_TRANSFORM_WITH_LENGTH_0","afterTransform","ts","_transformState","transforming","writechunk","rs","needTransform","writeencoding","transform","_transform","flush","_flush","done","err2","promise","globalThis","Promise","resolve","then","catch","setTimeout","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_defineProperty","configurable","_defineProperties","target","props","descriptor","inspect","custom","instance","Constructor","_classCallCheck","tail","protoProps","staticProps","s","alloc","offset","allocUnsafe","copy","hasStrings","_getString","_getBuffer","c","nb","buf","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectSpread","depth","customInspect","_Object$setPrototypeO","kLastResolve","kLastReject","kError","kEnded","kLastPromise","kHandlePromise","kStream","createIterResult","readAndResolve","iter","onReadable","AsyncIteratorPrototype","ReadableStreamAsyncIteratorPrototype","setPrototypeOf","reject","lastPromise","wrapForNext","_this2","_Object$create","iterator","ERR_MISSING_ARGS","destroyer","closed","to","popCallback","streams","pop","destroys","reduce","isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","iri","factory","prefixes","defaultPrefixes","processPrefix","cache","local","namedNode","N3DataFactory","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","NamedNode","blankNode","BlankNode","variable","Variable","literal","languageOrDataType","Literal","datatype","isInteger","isNaN","defaultGraph","triple","Term","id","other","language","datatypeString","lastIndexOf","atPos","dtPos","char","DefaultGraph","termFromId","endPos","components","unescapeQuotes","termToId","escapeQuotes","subject","predicate","Quad","toJSON","equals","quoted","blankNodePrefix","N3Parser","_contextStack","_graph","_setBase","baseIRI","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","fragmentPos","_base","_basePath","_baseRoot","_baseScheme","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","_subject","_predicate","_object","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","quantifier","_resolveIRI","_namedNode","_blankNode","_saveContext","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_readEntity","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_restoreContext","_readPredicateAfterBlank","list","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","inversePredicate","_readFormulaTail","_readInTopContext","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTail","_quad","contextStack","_readRDFStarTailOrGraph","_removeDotSegments","result","pathStart","segmentStart","quadCallback","prefixCallback","quads","tokenize","every","parser","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","_lists","lists","_outputStream","_endStream","output","_writeQuad","_writeQuadLine","_baseIRI","_prefixIRIs","addPrefixes","_inDefaultGraph","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","_encodeQuad","startsWith","characterReplacer","prefixMatch","_encodeLiteral","addQuad","hasPrefixes","IRIlist","prefixList","prefixIRI","child","children","contents","elements","_blockedWrite","singleDone","character","charCodeAt","toString","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","addQuads","index0","key0","key1","key2","index1","index2","existed","name0","name1","name2","array","tmp","entityKeys","value0","entity0","value1","entity1","values","parts","isString","graphs","uniqueIds","graphItem","subjects","predicates","objects","freeze","ids","entities","changed","_addToIndex","_removeFromIndex","removeQuad","remove","removeMatches","subjectId","predicateId","objectId","_getGraphs","graphId","_findInIndex","getQuads","_countInIndex","some","results","forSubjects","_uniqueEntities","_loopBy2Keys","_loopByKey1","_loopByKey0","_loop","forPredicates","forObjects","o","forGraphs","g","suggestedName","ignoreErrors","onError","node","tails","toRemove","tailQuad","headPos","items","malformed","objectQuads","subjectQuads","removeQuads","size","graphKey","subjectKey","predicateKey","N3StreamParser","onData","onEnd","parse","uri","N3StreamWriter","writer","_writer","addPrefix"],"mappings":";4GAIA,IAAIA,EAAQ,GAEZ,SAASC,EAAgBC,EAAMC,EAASC,GACjCA,IACHA,EAAOC,OAWT,IAAIC,EAEJ,SAAUC,GAnBZ,IAAwBC,EAAUC,EAsB9B,SAASH,EAAUI,EAAMC,EAAMC,GAC7B,OAAOL,EAAMM,KAAKC,KAdtB,SAAoBJ,EAAMC,EAAMC,GAC9B,MAAuB,kBAAZT,EACFA,EAEAA,EAAQO,EAAMC,EAAMC,GAUHG,CAAWL,EAAMC,EAAMC,KAAUE,KAG3D,OA1B8BL,EAoBJF,GApBNC,EAoBLF,GApBsCU,UAAYC,OAAOC,OAAOT,EAAWO,WAAYR,EAASQ,UAAUG,YAAcX,EAAUA,EAASY,UAAYX,EA0B/JH,EAPT,CAQEF,GAEFE,EAAUU,UAAUK,KAAOjB,EAAKiB,KAChCf,EAAUU,UAAUd,KAAOA,EAC3BF,EAAME,GAAQI,EAIhB,SAASgB,EAAMC,EAAUC,GACvB,GAAIC,MAAMC,QAAQH,GAAW,CAC3B,IAAII,EAAMJ,EAASK,OAKnB,OAJAL,EAAWA,EAASM,KAAI,SAAUC,GAChC,OAAOC,OAAOD,MAGZH,EAAM,EACD,UAAUK,OAAOR,EAAO,KAAKQ,OAAOT,EAASU,MAAM,EAAGN,EAAM,GAAGO,KAAK,MAAO,SAAWX,EAASI,EAAM,GAC3F,IAARA,EACF,UAAUK,OAAOR,EAAO,KAAKQ,OAAOT,EAAS,GAAI,QAAQS,OAAOT,EAAS,IAEzE,MAAMS,OAAOR,EAAO,KAAKQ,OAAOT,EAAS,IAGlD,MAAO,MAAMS,OAAOR,EAAO,KAAKQ,OAAOD,OAAOR,IA+BlDtB,EAAgB,yBAAyB,SAAUoB,EAAMc,GACvD,MAAO,cAAgBA,EAAQ,4BAA8Bd,EAAO,MACnEe,WACHnC,EAAgB,wBAAwB,SAAUoB,EAAME,EAAUc,GAEhE,IAAIC,EA/BmBC,EAAQC,EAwC3BC,EAEJ,GATwB,kBAAblB,IAjCYgB,EAiCkC,OAAVhB,EAhCpCmB,QAAQF,GAAOA,EAAM,EAAI,GAAKA,EAAKD,EAAOX,UAAYW,IAiC/DD,EAAa,cACbf,EAAWA,EAASoB,QAAQ,QAAS,KAErCL,EAAa,UAhCjB,SAAkBM,EAAKL,EAAQM,GAK7B,YAJiBC,IAAbD,GAA0BA,EAAWD,EAAIhB,UAC3CiB,EAAWD,EAAIhB,QAGVgB,EAAIG,UAAUF,EAAWN,EAAOX,OAAQiB,KAAcN,EAgCzDS,CAAS3B,EAAM,aAEjBoB,EAAM,OAAOT,OAAOX,EAAM,KAAKW,OAAOM,EAAY,KAAKN,OAAOV,EAAMC,EAAU,aACzE,CACL,IAAI0B,EAhCR,SAAkBL,EAAKL,EAAQW,GAK7B,MAJqB,kBAAVA,IACTA,EAAQ,KAGNA,EAAQX,EAAOX,OAASgB,EAAIhB,UAGS,IAAhCgB,EAAIO,QAAQZ,EAAQW,GAwBhBE,CAAS/B,EAAM,KAAO,WAAa,WAC9CoB,EAAM,QAAST,OAAOX,EAAM,MAAOW,OAAOiB,EAAM,KAAKjB,OAAOM,EAAY,KAAKN,OAAOV,EAAMC,EAAU,SAItG,OADAkB,GAAO,mBAAmBT,cAAcK,KAEvCD,WACHnC,EAAgB,4BAA6B,2BAC7CA,EAAgB,8BAA8B,SAAUoB,GACtD,MAAO,OAASA,EAAO,gCAEzBpB,EAAgB,6BAA8B,mBAC9CA,EAAgB,wBAAwB,SAAUoB,GAChD,MAAO,eAAiBA,EAAO,mCAEjCpB,EAAgB,wBAAyB,kCACzCA,EAAgB,yBAA0B,6BAC1CA,EAAgB,6BAA8B,mBAC9CA,EAAgB,yBAA0B,sCAAuCmC,WACjFnC,EAAgB,wBAAwB,SAAUoD,GAChD,MAAO,qBAAuBA,IAC7BjB,WACHnC,EAAgB,qCAAsC,oCACtDqD,EAAOC,QAAQvD,MAAQA,G,kCC9HvB,YA2BA,IAAIwD,EAAavC,OAAOwC,MAAQ,SAAUC,GACxC,IAAID,EAAO,GAEX,IAAK,IAAIE,KAAOD,EACdD,EAAKG,KAAKD,GAGZ,OAAOF,GAKTH,EAAOC,QAAUM,EAEjB,IAAIC,EAAWC,EAAQ,KAEnBC,EAAWD,EAAQ,KAEvBA,EAAQ,EAARA,CAAoBF,EAAQC,GAM1B,IAFA,IAAIL,EAAOD,EAAWQ,EAAShD,WAEtBiD,EAAI,EAAGA,EAAIR,EAAK7B,OAAQqC,IAAK,CACpC,IAAIC,EAAST,EAAKQ,GACbJ,EAAO7C,UAAUkD,KAASL,EAAO7C,UAAUkD,GAAUF,EAAShD,UAAUkD,IAIjF,SAASL,EAAOM,GACd,KAAMrD,gBAAgB+C,GAAS,OAAO,IAAIA,EAAOM,GACjDL,EAASjD,KAAKC,KAAMqD,GACpBH,EAASnD,KAAKC,KAAMqD,GACpBrD,KAAKsD,eAAgB,EAEjBD,KACuB,IAArBA,EAAQE,WAAoBvD,KAAKuD,UAAW,IACvB,IAArBF,EAAQG,WAAoBxD,KAAKwD,UAAW,IAElB,IAA1BH,EAAQC,gBACVtD,KAAKsD,eAAgB,EACrBtD,KAAKyD,KAAK,MAAOC,KAiCvB,SAASA,IAEH1D,KAAK2D,eAAeC,OAGxBC,EAAQC,SAASC,EAAS/D,MAG5B,SAAS+D,EAAQC,GACfA,EAAKC,MArCP9D,OAAO+D,eAAenB,EAAO7C,UAAW,wBAAyB,CAI/DiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAK2D,eAAeU,iBAG/BlE,OAAO+D,eAAenB,EAAO7C,UAAW,iBAAkB,CAIxDiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAK2D,gBAAkB3D,KAAK2D,eAAeW,eAGtDnE,OAAO+D,eAAenB,EAAO7C,UAAW,iBAAkB,CAIxDiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAK2D,eAAe7C,UAgB/BX,OAAO+D,eAAenB,EAAO7C,UAAW,YAAa,CAInDiE,YAAY,EACZC,IAAK,WACH,YAA4BpC,IAAxBhC,KAAKuE,qBAAwDvC,IAAxBhC,KAAK2D,iBAIvC3D,KAAKuE,eAAeC,WAAaxE,KAAK2D,eAAea,YAE9DC,IAAK,SAAapD,QAGYW,IAAxBhC,KAAKuE,qBAAwDvC,IAAxBhC,KAAK2D,iBAM9C3D,KAAKuE,eAAeC,UAAYnD,EAChCrB,KAAK2D,eAAea,UAAYnD,Q,mDCxIpC,IAAMqD,EAAO,8CACTC,EAAO,oCACPC,EAAO,kCAEI,KACbC,IAAK,CACHC,QAAS,GAAF,OAAKH,EAAL,WACPI,QAAS,GAAF,OAAKJ,EAAL,WACPK,OAAQ,GAAF,OAAML,EAAN,UACNM,QAAS,GAAF,OAAKN,EAAL,WACPO,OAAQ,GAAF,OAAMP,EAAN,WAERQ,IAAK,CACHhD,KAAM,GAAF,OAAWuC,EAAX,QACJU,IAAK,GAAF,OAAYV,EAAZ,OACHW,MAAO,GAAF,OAAUX,EAAV,SACLY,KAAM,GAAF,OAAWZ,EAAX,QACJa,WAAY,GAAF,OAAKb,EAAL,eAEZc,IAAK,CACHC,OAAQ,wCAEVC,EAAG,CACDC,QAAS,GAAF,OAAKf,EAAL,iBACPgB,OAAQ,GAAF,OAAMhB,EAAN,iBAERiB,IAAK,CACHC,QAAS,GAAF,OAAKlB,EAAL,kB,+HCvBHC,EAAQkB,IAARlB,IAGFmB,EAAiB,mDACjBC,EAAqB,CACzB,KAAM,KAAM,IAAK,IAAK,IAAK,IAC3B,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KAAM,EAAK,KACjD,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAK,IAAK,IAAK,IACjE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEzCC,EAAkB,6BAElBC,EAAkB,CACtBC,MAAM,EACNC,eAAe,EACfC,qBAAqB,EACrBC,WAAW,EACXC,QAAQ,EACRC,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,YAAY,GAERC,EAAgB,MAGDC,E,WACnB,WAAYzD,GAwBV,GAxBmB,oBAGnBrD,KAAKoG,KAAO,oCACZpG,KAAKqG,cAAgB,0CACrBrG,KAAKsG,oBAAsB,2BAC3BtG,KAAK+G,wBAA0B,2BAC/B/G,KAAKuG,UAAY,4CACjBvG,KAAKgH,QAAU,6XACfhH,KAAKiH,UAAY,qjCACjBjH,KAAKkH,UAAY,gZACjBlH,KAAKwG,OAAS,+ZACdxG,KAAKmH,QAAU,kFACfnH,KAAKoH,SAAW,4CAChBpH,KAAKqH,SAAW,uBAChBrH,KAAKsH,eAAiB,oCACtBtH,KAAKuH,iBAAmB,4BACxBvH,KAAKyG,SAAW,4CAChBzG,KAAK0G,SAAW,cAChB1G,KAAK2G,YAAc,UACnB3G,KAAK4G,WAAa,mBAClBvD,EAAUA,GAAW,GAGjBrD,KAAKwH,YAAcnE,EAAQoE,SAG7B,IAAK,IAAM5E,KAFX7C,KAAK0H,SAAU,EAEG1H,OACV6C,KAAOsD,IAAoBnG,KAAK6C,aAAgB8E,SACpD3H,KAAK6C,GAAOgE,QAKhB7G,KAAK0H,SAAyB,IAAfrE,EAAQuE,GAGzB5H,KAAK6H,YAAcxE,EAAQyE,SAE3B9H,KAAK+H,mBAAqB,E,2DAMbC,EAAUC,GAIvB,IAFA,IAAIC,EAAQlI,KAAKmI,OACXC,EAAiBpI,KAAK6H,YACf,CAGX,IADA,IAAIQ,OAAe,EAAEC,OAAO,EACrBD,EAAkBrI,KAAKyG,SAAS8B,KAAKL,IAEtCE,IAAmBE,EAAUtI,KAAK0G,SAAS6B,KAAKF,EAAgB,MAClEL,EAAS,KAAM,CAAEQ,KAAMxI,KAAKyI,MAAOtG,KAAM,UAAWd,MAAOiH,EAAQ,GAAII,OAAQ,KAEjFR,EAAQA,EAAMtG,OAAOyG,EAAgB,GAAGvH,OAAQoH,EAAMpH,QACtDd,KAAKyI,QAOP,IAJKJ,IAAoBA,EAAkBrI,KAAK2G,YAAY4B,KAAKL,MAC/DA,EAAQA,EAAMtG,OAAOyG,EAAgB,GAAGvH,OAAQoH,EAAMpH,SAGpDd,KAAK4G,WAAW+B,KAAKT,GAQvB,OANID,IAEEG,IAAmBE,EAAUtI,KAAK0G,SAAS6B,KAAKL,KAClDF,EAAS,KAAM,CAAEQ,KAAMxI,KAAKyI,MAAOtG,KAAM,UAAWd,MAAOiH,EAAQ,GAAII,OAAQ,KACjFV,EAASE,EAAQ,KAAM,CAAEM,KAAMxI,KAAKyI,MAAOtG,KAAM,MAAOd,MAAO,GAAIqH,OAAQ,MAEtE1I,KAAKmI,OAASD,EAIvB,IAAMM,EAAOxI,KAAKyI,MAAOG,EAAYV,EAAM,GACvC/F,EAAO,GAAId,EAAQ,GAAIqH,EAAS,GAChCG,EAAQ,KAAMC,EAAc,EAAGC,GAAe,EAClD,OAAQH,GACR,IAAK,IAEH,GAAIV,EAAMpH,OAAS,EACjB,MAEG,GAAiB,MAAboH,EAAM,GAUV,CACClI,KAAK0H,UACPoB,EAAc,EACd3G,EAAO,KAET,MAXA,GAHAnC,KAAKgJ,gBAAkB,KAGN,OADjBd,EAAQA,EAAMtG,OAAO,IACX,GAAY,CACpBmH,GAAe,EACf,MAYN,IAAK,IAEH,GAAIF,EAAQ7I,KAAKqG,cAAckC,KAAKL,GAClC/F,EAAO,MAAOd,EAAQwH,EAAM,QAEzB,GAAIA,EAAQ7I,KAAKoG,KAAKmC,KAAKL,GAAQ,CAEtC,GAAc,QADd7G,EAAQrB,KAAKiJ,UAAUJ,EAAM,MACP3C,EAAgByC,KAAKtH,GACzC,OAAO6H,EAAkBlJ,MAC3BmC,EAAO,WAGA+F,EAAMpH,OAAS,GAAkB,MAAboH,EAAM,IACjC/F,EAAO,KAAM2G,EAAc,GAEpB9I,KAAK0H,SAAWQ,EAAMpH,OAAS,GAAkB,MAAboH,EAAM,KACjD/F,EAAO,UAAW2G,EAAc,EAAGzH,EAAQ,KAC7C,MAEF,IAAK,IACC6G,EAAMpH,OAAS,GAAkB,MAAboH,EAAM,KAC5B/F,EAAO,KAAM2G,EAAc,GAC7B,MAEF,IAAK,MAIED,EAAQ7I,KAAKwG,OAAO+B,KAAKL,KAC1BD,IAAkBY,EAAQ7I,KAAKwG,OAAO+B,KAAZ,UAAoBL,EAApB,UAC5B/F,EAAO,QAASuG,EAAS,IAAKrH,EAAQwH,EAAM,IAC9C,MAEF,IAAK,IAEH,GAAIA,EAAQ7I,KAAKsG,oBAAoBiC,KAAKL,GACxC7G,EAAQwH,EAAM,OAEX,OACuB7I,KAAKmJ,cAAcjB,GAC7C,GADG7G,EADA,EACAA,MAAOyH,EADP,EACOA,YACI,OAAVzH,EACF,OAAO6H,EAAkBlJ,MAEf,OAAV6I,GAAkC,IAAhBC,IACpB3G,EAAO,UACPnC,KAAK+H,mBAAqB,GAE5B,MAEF,IAAK,IACH,IAAK/H,KAAKwH,UAAW,CAEnB,GAAIqB,EAAQ7I,KAAK+G,wBAAwBwB,KAAKL,GAC5C7G,EAAQwH,EAAM,OAEX,OACuB7I,KAAKmJ,cAAcjB,GAC7C,GADG7G,EADA,EACAA,MAAOyH,EADP,EACOA,YACI,OAAVzH,EACF,OAAO6H,EAAkBlJ,MAEf,OAAV6I,GAAkC,IAAhBC,IACpB3G,EAAO,UACPnC,KAAK+H,mBAAqB,GAG9B,MAEF,IAAK,IAEC/H,KAAK0H,UAAYmB,EAAQ7I,KAAKkH,UAAUqB,KAAKL,MAC/C/F,EAAO,MAAOd,EAAQwH,EAAM,IAC9B,MAEF,IAAK,IAE0B,YAAzB7I,KAAKgJ,kBAAkCH,EAAQ7I,KAAKuG,UAAUgC,KAAKL,KACrE/F,EAAO,WAAYd,EAAQwH,EAAM,KAE1BA,EAAQ7I,KAAKqH,SAASkB,KAAKL,MAClC/F,EAAO0G,EAAM,IACf,MAEF,IAAK,IAEH,GAAqB,IAAjBX,EAAMpH,OAAemH,EAAiBC,EAAM,GAAK,KAAOA,EAAM,GAAK,IAAM,CAC3E/F,EAAO,IACP2G,EAAc,EACd,MAIJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAICD,EAAQ7I,KAAKmH,QAAQoB,KAAKL,IAC1BD,IAAkBY,EAAQ7I,KAAKmH,QAAQoB,KAAb,UAAqBL,EAArB,UAC5B/F,EAAO,UAAWd,EAAQwH,EAAM,GAChCH,EAA8B,kBAAbG,EAAM,GAAkBhE,EAAIG,OACd,kBAAb6D,EAAM,GAAkBhE,EAAIC,QAAUD,EAAII,SAE9D,MAEF,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KAEC4D,EAAQ7I,KAAKsH,eAAeiB,KAAKL,IACnC/F,EAAO0G,EAAM,GAAGO,cAEhBL,GAAe,EACjB,MAEF,IAAK,IACL,IAAK,KAECF,EAAQ7I,KAAKoH,SAASmB,KAAKL,KAC7B/F,EAAO,UAAWd,EAAQwH,EAAM,GAAIH,EAAS7D,EAAIE,SAEjDgE,GAAe,EACjB,MAEF,IAAK,KAECF,EAAQ7I,KAAKuH,iBAAiBgB,KAAKL,KACrC/F,EAAO,eAAgBd,EAAQ,KAE/B0H,GAAe,EACjB,MAEF,IAAK,IAEC/I,KAAK0H,SAAWQ,EAAMpH,OAAS,IACjCqB,EAAO,eACU,MAAb+F,EAAM,IACRY,EAAc,EAAGzH,EAAQ,MAEzByH,EAAc,EAAGzH,EAAQ,MAE7B,MAEF,IAAK,IACH,IAAKrB,KAAK0H,QACR,MACJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACE1H,KAAKwH,YACRsB,EAAc,EACd3G,EAAOyG,GAET,MAEF,QACEG,GAAe,EAkBjB,GAdIA,IAE4B,YAAzB/I,KAAKgJ,iBAA0D,WAAzBhJ,KAAKgJ,mBAC3CH,EAAQ7I,KAAKgH,QAAQuB,KAAKL,MAKrBW,EAAQ7I,KAAKiH,UAAUsB,KAAKL,KAC7BD,IAAkBY,EAAQ7I,KAAKiH,UAAUsB,KAAf,UAAuBL,EAAvB,UACjC/F,EAAO,WAAYuG,EAASG,EAAM,IAAM,GAAIxH,EAAQrB,KAAKiJ,UAAUJ,EAAM,MANzE1G,EAAO,SAAUd,EAAQwH,EAAM,IAAM,KAUZ,OAAzB7I,KAAKgJ,gBACP,OAAQ7G,GACR,IAAK,WAAYA,EAAO,OAAW,MACnC,IAAK,MAAYA,EAAO,UAAW,MACnC,QAAiBA,EAAO,GAK1B,IAAKA,EAIH,OAAI8F,IAAmB,YAAYU,KAAKT,IAAU,QAAQS,KAAKT,GACtDgB,EAAkBlJ,MAElBA,KAAKmI,OAASD,EAIzB,IAAMmB,EAAQ,CAAEb,KAAMA,EAAMrG,KAAMA,EAAMd,MAAOA,EAAOqH,OAAQA,GAC9DV,EAAS,KAAMqB,GACfrJ,KAAKsJ,cAAgBD,EACrBrJ,KAAKgJ,gBAAkB7G,EAEvB+F,EAAQA,EAAMtG,OAAOkH,GAAeD,EAAM,GAAG/H,OAAQoH,EAAMpH,QAI7D,SAASoI,EAAkBlF,GAAQgE,EAAShE,EAAKuF,aAAa,OAAOhB,KAAKL,GAAO,Q,gCAIzEsB,GACR,IAAIC,GAAU,EACRC,EAAWF,EAAK3H,QAAQmE,GAAgB,SAAC2D,EAAUC,EAAUC,EAAUC,GAE3E,GAAwB,kBAAbF,EACT,OAAO3I,OAAO8I,aAAaC,OAAOC,SAASL,EAAU,KAEvD,GAAwB,kBAAbC,EAAuB,CAChC,IAAIK,EAAWF,OAAOC,SAASJ,EAAU,IACzC,OAAOK,GAAY,MAASjJ,OAAO8I,aAAaC,OAAOC,SAASJ,EAAU,KACxE5I,OAAO8I,aAAa,QAAWG,GAAY,QAAY,IAAK,OAAqB,KAAXA,IAG1E,OAAIJ,KAAe7D,EACVA,EAAmB6D,IAE5BL,GAAU,EACH,OAET,OAAOA,EAAU,KAAOC,I,oCAIZxB,GAEZ,GAAIA,EAAMpH,QAAU,EAAG,CAOrB,IALA,IAAMqJ,EAAUjC,EAAMW,MAAM,qBAAqB,GAC3CuB,EAAgBD,EAAQrJ,OAG1BuJ,EAAaC,KAAKC,IAAIvK,KAAK+H,mBAAoBqC,IAC3CC,EAAanC,EAAM7F,QAAQ8H,EAASE,IAAe,GAAG,CAG5D,IADA,IAAIG,EAAiB,EAC6B,OAA3CtC,EAAMmC,EAAaG,EAAiB,IACzCA,IAIF,GAAIA,EAAiB,IAAM,EAAG,CAE5B,IAAMC,EAAMvC,EAAMjG,UAAUmI,EAAeC,GACrCK,EAAQD,EAAIE,MAAM,cAAc7J,OAAS,EACzCgI,EAAcuB,EAAaD,EAEjC,GAAsB,IAAlBA,GAAiC,IAAVM,GACL,IAAlBN,GAAuBpK,KAAKwH,UAC9B,MAEF,OADAxH,KAAKyI,OAASiC,EACP,CAAErJ,MAAOrB,KAAKiJ,UAAUwB,GAAM3B,eAEvCuB,IAEFrK,KAAK+H,mBAAqBG,EAAMpH,OAASsJ,EAAgB,EAE3D,MAAO,CAAE/I,MAAO,GAAIyH,YAAa,K,mCAItB8B,GACX5K,KAAKmI,OAAS,KACd,IAAM0C,EAAM,IAAItL,MAAJ,sBAAyBqL,EAAzB,qBAA2C5K,KAAKyI,MAAhD,MAMZ,OALAoC,EAAIC,QAAU,CACZzB,WAAOrH,EACPwG,KAAMxI,KAAKyI,MACXa,cAAetJ,KAAKsJ,eAEfuB,I,+BAOA3C,EAAOF,GAAU,WAIxB,GAHAhI,KAAKyI,MAAQ,EAGQ,kBAAVP,EAAoB,CAG7B,GAFAlI,KAAKmI,OAASD,EAEU,oBAAbF,EAGN,CACH,IACI+C,EADEC,EAAS,GAGf,GADAhL,KAAKiL,gBAAe,SAACC,EAAGC,GAAJ,OAAUD,EAAKH,EAAQG,EAAKF,EAAOlI,KAAKqI,MAAI,GAC5DJ,EAAO,MAAMA,EACjB,OAAOC,EAPPI,KAAe,kBAAM,EAAKH,eAAejD,GAAU,WAYrDhI,KAAKmI,OAAS,GACdnI,KAAKqL,eAAiB,KACW,oBAAtBnD,EAAMoD,aACfpD,EAAMoD,YAAY,QAEpBpD,EAAMqD,GAAG,QAAQ,SAAAC,GACK,OAAhB,EAAKrD,QAAmC,IAAhBqD,EAAK1K,SAE3B,EAAKuK,iBACPG,EAAOC,EAAOvK,OAAO,CAAC,EAAKmK,eAAgBG,IAC3C,EAAKH,eAAiB,MAGI,IAAxBG,EAAKA,EAAK1K,OAAS,GACrB,EAAKuK,eAAiBG,GAItB,EAAKrD,QAAUqD,EACf,EAAKP,eAAejD,GAAU,QAKpCE,EAAMqD,GAAG,OAAO,WACM,OAAhB,EAAKpD,QACP,EAAK8C,eAAejD,GAAU,MAElCE,EAAMqD,GAAG,QAASvD,O,oDCnexBvF,EAAUD,EAAOC,QAAUQ,EAAQ,MAC3ByI,OAASjJ,EACjBA,EAAQO,SAAWP,EACnBA,EAAQS,SAAWD,EAAQ,KAC3BR,EAAQM,OAASE,EAAQ,KACzBR,EAAQkJ,UAAY1I,EAAQ,KAC5BR,EAAQmJ,YAAc3I,EAAQ,KAC9BR,EAAQoJ,SAAW5I,EAAQ,KAC3BR,EAAQqJ,SAAW7I,EAAQ,M,iCCJ3B,IAAI8I,EAA6B9I,EAAQ,KAAmB/D,MAAM6M,2BAgBlE,SAASC,KAmFTxJ,EAAOC,QA7EP,SAASwJ,EAAIC,EAAQC,EAAMnE,GACzB,GAAoB,oBAATmE,EAAqB,OAAOF,EAAIC,EAAQ,KAAMC,GACpDA,IAAMA,EAAO,IAClBnE,EAvBF,SAAcA,GACZ,IAAIoE,GAAS,EACb,OAAO,WACL,IAAIA,EAAJ,CACAA,GAAS,EAET,IAAK,IAAIC,EAAOC,UAAUxL,OAAQyL,EAAO,IAAI5L,MAAM0L,GAAOG,EAAO,EAAGA,EAAOH,EAAMG,IAC/ED,EAAKC,GAAQF,UAAUE,GAGzBxE,EAASyE,MAAMzM,KAAMuM,KAaZ9I,CAAKuE,GAAYgE,GAC5B,IAAIzI,EAAW4I,EAAK5I,WAA8B,IAAlB4I,EAAK5I,UAAsB2I,EAAO3I,SAC9DC,EAAW2I,EAAK3I,WAA8B,IAAlB2I,EAAK3I,UAAsB0I,EAAO1I,SAE9DkJ,EAAiB,WACdR,EAAO1I,UAAUmJ,KAGpBC,EAAgBV,EAAOvI,gBAAkBuI,EAAOvI,eAAekI,SAE/Dc,EAAW,WACbnJ,GAAW,EACXoJ,GAAgB,EACXrJ,GAAUyE,EAASjI,KAAKmM,IAG3BW,EAAgBX,EAAO3H,gBAAkB2H,EAAO3H,eAAeuI,WAE/DpJ,EAAQ,WACVH,GAAW,EACXsJ,GAAgB,EACXrJ,GAAUwE,EAASjI,KAAKmM,IAG3Ba,EAAU,SAAiBlC,GAC7B7C,EAASjI,KAAKmM,EAAQrB,IAGpBmC,EAAU,WACZ,IAAInC,EAEJ,OAAItH,IAAasJ,GACVX,EAAO3H,gBAAmB2H,EAAO3H,eAAeX,QAAOiH,EAAM,IAAIkB,GAC/D/D,EAASjI,KAAKmM,EAAQrB,IAG3BrH,IAAaoJ,GACVV,EAAOvI,gBAAmBuI,EAAOvI,eAAeC,QAAOiH,EAAM,IAAIkB,GAC/D/D,EAASjI,KAAKmM,EAAQrB,SAF/B,GAMEoC,EAAY,WACdf,EAAOgB,IAAI3B,GAAG,SAAUoB,IAiB1B,OAnEF,SAAmBT,GACjB,OAAOA,EAAOiB,WAAqC,oBAAjBjB,EAAOkB,MAoDrCC,CAAUnB,GAIH1I,IAAa0I,EAAOvI,iBAE7BuI,EAAOX,GAAG,MAAOmB,GACjBR,EAAOX,GAAG,QAASmB,KANnBR,EAAOX,GAAG,WAAYoB,GACtBT,EAAOX,GAAG,QAASyB,GACfd,EAAOgB,IAAKD,IAAiBf,EAAOX,GAAG,UAAW0B,IAOxDf,EAAOX,GAAG,MAAO7H,GACjBwI,EAAOX,GAAG,SAAUoB,IACD,IAAfR,EAAKpB,OAAiBmB,EAAOX,GAAG,QAASwB,GAC7Cb,EAAOX,GAAG,QAASyB,GACZ,WACLd,EAAOoB,eAAe,WAAYX,GAClCT,EAAOoB,eAAe,QAASN,GAC/Bd,EAAOoB,eAAe,UAAWL,GAC7Bf,EAAOgB,KAAKhB,EAAOgB,IAAII,eAAe,SAAUX,GACpDT,EAAOoB,eAAe,MAAOZ,GAC7BR,EAAOoB,eAAe,QAASZ,GAC/BR,EAAOoB,eAAe,SAAUX,GAChCT,EAAOoB,eAAe,MAAO5J,GAC7BwI,EAAOoB,eAAe,QAASP,GAC/Bb,EAAOoB,eAAe,QAASN,M,kCCnGnC,cAyBA,IAAIjK,EAHJP,EAAOC,QAAUO,EAMjBA,EAASuK,cAAgBA,EAGhBtK,EAAQ,IAAUuK,aAA3B,IAEIC,EAAkB,SAAyBC,EAASvL,GACtD,OAAOuL,EAAQC,UAAUxL,GAAMrB,QAO7B4K,EAASzI,EAAQ,KAIjBwI,EAASxI,EAAQ,GAAUwI,OAE3BmC,EAAgBC,EAAOC,YAAc,aAYzC,IAEIC,EAFAC,EAAY/K,EAAQ,KAKtB8K,EADEC,GAAaA,EAAUC,SACjBD,EAAUC,SAAS,UAEnB,aAKV,IAcIC,EACAC,EACAC,EAhBAC,EAAapL,EAAQ,KAErBqL,EAAcrL,EAAQ,KAGtBsL,EADWtL,EAAQ,KACSsL,iBAE5BC,EAAiBvL,EAAQ,KAAa/D,MACtCuP,EAAuBD,EAAeC,qBACtCC,EAA4BF,EAAeE,0BAC3CC,EAA6BH,EAAeG,2BAC5CC,EAAqCJ,EAAeI,mCAOxD3L,EAAQ,EAARA,CAAoBD,EAAU0I,GAE9B,IAAImD,EAAiBP,EAAYO,eAC7BC,EAAe,CAAC,QAAS,QAAS,UAAW,QAAS,UAa1D,SAASvB,EAAclK,EAAS6I,EAAQ6C,GACtChM,EAASA,GAAUE,EAAQ,KAC3BI,EAAUA,GAAW,GAMG,mBAAb0L,IAAwBA,EAAW7C,aAAkBnJ,GAGhE/C,KAAKgP,aAAe3L,EAAQ2L,WACxBD,IAAU/O,KAAKgP,WAAahP,KAAKgP,cAAgB3L,EAAQ4L,oBAG7DjP,KAAKqE,cAAgBkK,EAAiBvO,KAAMqD,EAAS,wBAAyB0L,GAI9E/O,KAAKkP,OAAS,IAAIb,EAClBrO,KAAKc,OAAS,EACdd,KAAKmP,MAAQ,KACbnP,KAAKoP,WAAa,EAClBpP,KAAKqP,QAAU,KACfrP,KAAK4D,OAAQ,EACb5D,KAAK8M,YAAa,EAClB9M,KAAKsP,SAAU,EAKftP,KAAKuP,MAAO,EAGZvP,KAAKwP,cAAe,EACpBxP,KAAKyP,iBAAkB,EACvBzP,KAAK0P,mBAAoB,EACzB1P,KAAK2P,iBAAkB,EACvB3P,KAAK4P,QAAS,EAEd5P,KAAK6P,WAAkC,IAAtBxM,EAAQwM,UAEzB7P,KAAK8P,cAAgBzM,EAAQyM,YAE7B9P,KAAKwE,WAAY,EAIjBxE,KAAK+P,gBAAkB1M,EAAQ0M,iBAAmB,OAElD/P,KAAKgQ,WAAa,EAElBhQ,KAAKiQ,aAAc,EACnBjQ,KAAKkQ,QAAU,KACflQ,KAAKmQ,SAAW,KAEZ9M,EAAQ8M,WACLjC,IAAeA,EAAgBjL,EAAQ,KAAmBiL,eAC/DlO,KAAKkQ,QAAU,IAAIhC,EAAc7K,EAAQ8M,UACzCnQ,KAAKmQ,SAAW9M,EAAQ8M,UAI5B,SAASnN,EAASK,GAEhB,GADAN,EAASA,GAAUE,EAAQ,OACrBjD,gBAAgBgD,GAAW,OAAO,IAAIA,EAASK,GAGrD,IAAI0L,EAAW/O,gBAAgB+C,EAC/B/C,KAAKuE,eAAiB,IAAIgJ,EAAclK,EAASrD,KAAM+O,GAEvD/O,KAAKuD,UAAW,EAEZF,IAC0B,oBAAjBA,EAAQ+M,OAAqBpQ,KAAKqQ,MAAQhN,EAAQ+M,MAC9B,oBAApB/M,EAAQiN,UAAwBtQ,KAAKuQ,SAAWlN,EAAQiN,UAGrE5E,EAAO3L,KAAKC,MAiEd,SAASwQ,EAAiBtE,EAAQuE,EAAON,EAAUO,EAAYC,GAC7D5C,EAAM,mBAAoB0C,GAC1B,IAMMG,EANFC,EAAQ3E,EAAO3H,eAEnB,GAAc,OAAVkM,EACFI,EAAMvB,SAAU,EAyOpB,SAAoBpD,EAAQ2E,GAE1B,GADA9C,EAAM,cACF8C,EAAMjN,MAAO,OAEjB,GAAIiN,EAAMX,QAAS,CACjB,IAAIO,EAAQI,EAAMX,QAAQjM,MAEtBwM,GAASA,EAAM3P,SACjB+P,EAAM3B,OAAOpM,KAAK2N,GAClBI,EAAM/P,QAAU+P,EAAM7B,WAAa,EAAIyB,EAAM3P,QAIjD+P,EAAMjN,OAAQ,EAEViN,EAAMtB,KAIRuB,EAAa5E,IAGb2E,EAAMrB,cAAe,EAEhBqB,EAAMpB,kBACToB,EAAMpB,iBAAkB,EACxBsB,EAAc7E,KAlQhB8E,CAAW9E,EAAQ2E,QAKnB,GAFKF,IAAgBC,EAmDzB,SAAsBC,EAAOJ,GAC3B,IAAIG,EAhQiBhO,EAkQF6N,EAjQZhF,EAAOwF,SAASrO,IAAQA,aAAegL,GAiQA,kBAAV6C,QAAgCzO,IAAVyO,GAAwBI,EAAM7B,aACtF4B,EAAK,IAAInC,EAAqB,QAAS,CAAC,SAAU,SAAU,cAAegC,IAnQ/E,IAAuB7N,EAsQrB,OAAOgO,EA1DqBM,CAAaL,EAAOJ,IAE1CG,EACF/B,EAAe3C,EAAQ0E,QAClB,GAAIC,EAAM7B,YAAcyB,GAASA,EAAM3P,OAAS,EAKrD,GAJqB,kBAAV2P,GAAuBI,EAAM7B,YAAc7O,OAAOgR,eAAeV,KAAWhF,EAAOvL,YAC5FuQ,EAtNR,SAA6BA,GAC3B,OAAOhF,EAAO2C,KAAKqC,GAqNLW,CAAoBX,IAG1BC,EACEG,EAAM/D,WAAY+B,EAAe3C,EAAQ,IAAI0C,GAA2CyC,EAASnF,EAAQ2E,EAAOJ,GAAO,QACtH,GAAII,EAAMjN,MACfiL,EAAe3C,EAAQ,IAAIwC,OACtB,IAAImC,EAAMrM,UACf,OAAO,EAEPqM,EAAMvB,SAAU,EAEZuB,EAAMX,UAAYC,GACpBM,EAAQI,EAAMX,QAAQoB,MAAMb,GACxBI,EAAM7B,YAA+B,IAAjByB,EAAM3P,OAAcuQ,EAASnF,EAAQ2E,EAAOJ,GAAO,GAAYc,EAAcrF,EAAQ2E,IAE7GQ,EAASnF,EAAQ2E,EAAOJ,GAAO,QAGzBC,IACVG,EAAMvB,SAAU,EAChBiC,EAAcrF,EAAQ2E,IAO1B,OAAQA,EAAMjN,QAAUiN,EAAM/P,OAAS+P,EAAMxM,eAAkC,IAAjBwM,EAAM/P,QAGtE,SAASuQ,EAASnF,EAAQ2E,EAAOJ,EAAOC,GAClCG,EAAMxB,SAA4B,IAAjBwB,EAAM/P,SAAiB+P,EAAMtB,MAChDsB,EAAMb,WAAa,EACnB9D,EAAOsF,KAAK,OAAQf,KAGpBI,EAAM/P,QAAU+P,EAAM7B,WAAa,EAAIyB,EAAM3P,OACzC4P,EAAYG,EAAM3B,OAAOuC,QAAQhB,GAAYI,EAAM3B,OAAOpM,KAAK2N,GAC/DI,EAAMrB,cAAcsB,EAAa5E,IAGvCqF,EAAcrF,EAAQ2E,GAvHxB1Q,OAAO+D,eAAelB,EAAS9C,UAAW,YAAa,CAIrDiE,YAAY,EACZC,IAAK,WACH,YAA4BpC,IAAxBhC,KAAKuE,gBAIFvE,KAAKuE,eAAeC,WAE7BC,IAAK,SAAapD,GAGXrB,KAAKuE,iBAMVvE,KAAKuE,eAAeC,UAAYnD,MAGpC2B,EAAS9C,UAAUoQ,QAAUhC,EAAYgC,QACzCtN,EAAS9C,UAAUwR,WAAapD,EAAYqD,UAE5C3O,EAAS9C,UAAUqQ,SAAW,SAAU1F,EAAK+G,GAC3CA,EAAG/G,IAOL7H,EAAS9C,UAAU4C,KAAO,SAAU2N,EAAON,GACzC,IACIQ,EADAE,EAAQ7Q,KAAKuE,eAkBjB,OAfKsM,EAAM7B,WAYT2B,GAAiB,EAXI,kBAAVF,KACTN,EAAWA,GAAYU,EAAMd,mBAEZc,EAAMV,WACrBM,EAAQhF,EAAO2C,KAAKqC,EAAON,GAC3BA,EAAW,IAGbQ,GAAiB,GAMdH,EAAiBxQ,KAAMyQ,EAAON,GAAU,EAAOQ,IAIxD3N,EAAS9C,UAAUuR,QAAU,SAAUhB,GACrC,OAAOD,EAAiBxQ,KAAMyQ,EAAO,MAAM,GAAM,IAyEnDzN,EAAS9C,UAAU2R,SAAW,WAC5B,OAAuC,IAAhC7R,KAAKuE,eAAe8K,SAI7BrM,EAAS9C,UAAUoL,YAAc,SAAUwG,GACpC5D,IAAeA,EAAgBjL,EAAQ,KAAmBiL,eAC/D,IAAIgC,EAAU,IAAIhC,EAAc4D,GAChC9R,KAAKuE,eAAe2L,QAAUA,EAE9BlQ,KAAKuE,eAAe4L,SAAWnQ,KAAKuE,eAAe2L,QAAQC,SAK3D,IAHA,IAAI4B,EAAI/R,KAAKuE,eAAe2K,OAAO8C,KAC/BC,EAAU,GAED,OAANF,GACLE,GAAW/B,EAAQoB,MAAMS,EAAEvG,MAC3BuG,EAAIA,EAAEG,KAOR,OAJAlS,KAAKuE,eAAe2K,OAAOiD,QAEX,KAAZF,GAAgBjS,KAAKuE,eAAe2K,OAAOpM,KAAKmP,GACpDjS,KAAKuE,eAAezD,OAASmR,EAAQnR,OAC9Bd,MAIT,IAAIoS,EAAU,WAuBd,SAASC,EAAcC,EAAGzB,GACxB,OAAIyB,GAAK,GAAsB,IAAjBzB,EAAM/P,QAAgB+P,EAAMjN,MAAc,EACpDiN,EAAM7B,WAAmB,EAEzBsD,IAAMA,EAEJzB,EAAMxB,SAAWwB,EAAM/P,OAAe+P,EAAM3B,OAAO8C,KAAKxG,KAAK1K,OAAmB+P,EAAM/P,QAIxFwR,EAAIzB,EAAMxM,gBAAewM,EAAMxM,cA/BrC,SAAiCiO,GAgB/B,OAfIA,GAAKF,EAEPE,EAAIF,GAIJE,IACAA,GAAKA,IAAM,EACXA,GAAKA,IAAM,EACXA,GAAKA,IAAM,EACXA,GAAKA,IAAM,EACXA,GAAKA,IAAM,GACXA,KAGKA,EAe4CC,CAAwBD,IACvEA,GAAKzB,EAAM/P,OAAewR,EAEzBzB,EAAMjN,MAKJiN,EAAM/P,QAJX+P,EAAMrB,cAAe,EACd,IAwIX,SAASsB,EAAa5E,GACpB,IAAI2E,EAAQ3E,EAAO3H,eACnBwJ,EAAM,eAAgB8C,EAAMrB,aAAcqB,EAAMpB,iBAChDoB,EAAMrB,cAAe,EAEhBqB,EAAMpB,kBACT1B,EAAM,eAAgB8C,EAAMxB,SAC5BwB,EAAMpB,iBAAkB,EACxB5L,EAAQC,SAASiN,EAAe7E,IAIpC,SAAS6E,EAAc7E,GACrB,IAAI2E,EAAQ3E,EAAO3H,eACnBwJ,EAAM,gBAAiB8C,EAAMrM,UAAWqM,EAAM/P,OAAQ+P,EAAMjN,OAEvDiN,EAAMrM,YAAcqM,EAAM/P,SAAU+P,EAAMjN,QAC7CsI,EAAOsF,KAAK,YACZX,EAAMpB,iBAAkB,GAS1BoB,EAAMrB,cAAgBqB,EAAMxB,UAAYwB,EAAMjN,OAASiN,EAAM/P,QAAU+P,EAAMxM,cAC7EmO,EAAKtG,GASP,SAASqF,EAAcrF,EAAQ2E,GACxBA,EAAMZ,cACTY,EAAMZ,aAAc,EACpBpM,EAAQC,SAAS2O,EAAgBvG,EAAQ2E,IAI7C,SAAS4B,EAAevG,EAAQ2E,GAwB9B,MAAQA,EAAMvB,UAAYuB,EAAMjN,QAAUiN,EAAM/P,OAAS+P,EAAMxM,eAAiBwM,EAAMxB,SAA4B,IAAjBwB,EAAM/P,SAAe,CACpH,IAAID,EAAMgQ,EAAM/P,OAGhB,GAFAiN,EAAM,wBACN7B,EAAOkE,KAAK,GACRvP,IAAQgQ,EAAM/P,OAChB,MAGJ+P,EAAMZ,aAAc,EA6QtB,SAASyC,EAAwB1O,GAC/B,IAAI6M,EAAQ7M,EAAKO,eACjBsM,EAAMnB,kBAAoB1L,EAAK2O,cAAc,YAAc,EAEvD9B,EAAMlB,kBAAoBkB,EAAMjB,OAGlCiB,EAAMxB,SAAU,EACPrL,EAAK2O,cAAc,QAAU,GACtC3O,EAAK4O,SAIT,SAASC,EAAiB7O,GACxB+J,EAAM,4BACN/J,EAAKoM,KAAK,GA4BZ,SAAS0C,EAAQ5G,EAAQ2E,GACvB9C,EAAM,SAAU8C,EAAMvB,SAEjBuB,EAAMvB,SACTpD,EAAOkE,KAAK,GAGdS,EAAMlB,iBAAkB,EACxBzD,EAAOsF,KAAK,UACZgB,EAAKtG,GACD2E,EAAMxB,UAAYwB,EAAMvB,SAASpD,EAAOkE,KAAK,GAgBnD,SAASoC,EAAKtG,GACZ,IAAI2E,EAAQ3E,EAAO3H,eAGnB,IAFAwJ,EAAM,OAAQ8C,EAAMxB,SAEbwB,EAAMxB,SAA6B,OAAlBnD,EAAOkE,UA4HjC,SAAS2C,EAAST,EAAGzB,GAEnB,OAAqB,IAAjBA,EAAM/P,OAAqB,MAE3B+P,EAAM7B,WAAYgE,EAAMnC,EAAM3B,OAAO+D,SAAkBX,GAAKA,GAAKzB,EAAM/P,QAEtDkS,EAAfnC,EAAMX,QAAeW,EAAM3B,OAAO9N,KAAK,IAAqC,IAAxByP,EAAM3B,OAAOpO,OAAoB+P,EAAM3B,OAAO7J,QAAmBwL,EAAM3B,OAAOhO,OAAO2P,EAAM/P,QACnJ+P,EAAM3B,OAAOiD,SAGba,EAAMnC,EAAM3B,OAAOgE,QAAQZ,EAAGzB,EAAMX,SAE/B8C,GATP,IAAIA,EAYN,SAASG,EAAYjH,GACnB,IAAI2E,EAAQ3E,EAAO3H,eACnBwJ,EAAM,cAAe8C,EAAM/D,YAEtB+D,EAAM/D,aACT+D,EAAMjN,OAAQ,EACdC,EAAQC,SAASsP,EAAevC,EAAO3E,IAI3C,SAASkH,EAAcvC,EAAO3E,GAG5B,GAFA6B,EAAM,gBAAiB8C,EAAM/D,WAAY+D,EAAM/P,SAE1C+P,EAAM/D,YAA+B,IAAjB+D,EAAM/P,SAC7B+P,EAAM/D,YAAa,EACnBZ,EAAO3I,UAAW,EAClB2I,EAAOsF,KAAK,OAERX,EAAMf,aAAa,CAGrB,IAAIuD,EAASnH,EAAOvI,iBAEf0P,GAAUA,EAAOvD,aAAeuD,EAAOxH,WAC1CK,EAAOoE,WAgBf,SAASjO,EAAQiR,EAAIC,GACnB,IAAK,IAAIvS,EAAI,EAAGwS,EAAIF,EAAGxS,OAAQE,EAAIwS,EAAGxS,IACpC,GAAIsS,EAAGtS,KAAOuS,EAAG,OAAOvS,EAG1B,OAAQ,EA3tBVgC,EAAS9C,UAAUkQ,KAAO,SAAUkC,GAClCvE,EAAM,OAAQuE,GACdA,EAAIrI,SAASqI,EAAG,IAChB,IAAIzB,EAAQ7Q,KAAKuE,eACbkP,EAAQnB,EAKZ,GAJU,IAANA,IAASzB,EAAMpB,iBAAkB,GAI3B,IAAN6C,GAAWzB,EAAMrB,gBAA0C,IAAxBqB,EAAMxM,cAAsBwM,EAAM/P,QAAU+P,EAAMxM,cAAgBwM,EAAM/P,OAAS,IAAM+P,EAAMjN,OAGlI,OAFAmK,EAAM,qBAAsB8C,EAAM/P,OAAQ+P,EAAMjN,OAC3B,IAAjBiN,EAAM/P,QAAgB+P,EAAMjN,MAAOuP,EAAYnT,MAAW8Q,EAAa9Q,MACpE,KAKT,GAAU,KAFVsS,EAAID,EAAcC,EAAGzB,KAENA,EAAMjN,MAEnB,OADqB,IAAjBiN,EAAM/P,QAAcqS,EAAYnT,MAC7B,KAyBT,IA4BIgT,EA5BAU,EAAS7C,EAAMrB,aAgDnB,OA/CAzB,EAAM,gBAAiB2F,IAEF,IAAjB7C,EAAM/P,QAAgB+P,EAAM/P,OAASwR,EAAIzB,EAAMxM,gBAEjD0J,EAAM,6BADN2F,GAAS,GAMP7C,EAAMjN,OAASiN,EAAMvB,QAEvBvB,EAAM,mBADN2F,GAAS,GAEAA,IACT3F,EAAM,WACN8C,EAAMvB,SAAU,EAChBuB,EAAMtB,MAAO,EAEQ,IAAjBsB,EAAM/P,SAAc+P,EAAMrB,cAAe,GAE7CxP,KAAKqQ,MAAMQ,EAAMxM,eAEjBwM,EAAMtB,MAAO,EAGRsB,EAAMvB,UAASgD,EAAID,EAAcoB,EAAO5C,KAMnC,QAFDmC,EAAPV,EAAI,EAASS,EAAST,EAAGzB,GAAkB,OAG7CA,EAAMrB,aAAeqB,EAAM/P,QAAU+P,EAAMxM,cAC3CiO,EAAI,IAEJzB,EAAM/P,QAAUwR,EAChBzB,EAAMb,WAAa,GAGA,IAAjBa,EAAM/P,SAGH+P,EAAMjN,QAAOiN,EAAMrB,cAAe,GAEnCiE,IAAUnB,GAAKzB,EAAMjN,OAAOuP,EAAYnT,OAGlC,OAARgT,GAAchT,KAAKwR,KAAK,OAAQwB,GAC7BA,GAwHThQ,EAAS9C,UAAUmQ,MAAQ,SAAUiC,GACnCzD,EAAe7O,KAAM,IAAI2O,EAA2B,aAGtD3L,EAAS9C,UAAUyT,KAAO,SAAUC,EAAMC,GACxC,IAAIC,EAAM9T,KACN6Q,EAAQ7Q,KAAKuE,eAEjB,OAAQsM,EAAMzB,YACZ,KAAK,EACHyB,EAAM1B,MAAQyE,EACd,MAEF,KAAK,EACH/C,EAAM1B,MAAQ,CAAC0B,EAAM1B,MAAOyE,GAC5B,MAEF,QACE/C,EAAM1B,MAAMrM,KAAK8Q,GAIrB/C,EAAMzB,YAAc,EACpBrB,EAAM,wBAAyB8C,EAAMzB,WAAYyE,GACjD,IACIE,IADUF,IAA6B,IAAjBA,EAAS5P,MAAkB2P,IAAS/P,EAAQmQ,QAAUJ,IAAS/P,EAAQoQ,OAC7EvQ,EAAQwQ,EAI5B,SAASC,EAAS5Q,EAAU6Q,GAC1BrG,EAAM,YAEFxK,IAAauQ,GACXM,IAAwC,IAA1BA,EAAWC,aAC3BD,EAAWC,YAAa,EAoB5BtG,EAAM,WAEN6F,EAAKtG,eAAe,QAASN,GAC7B4G,EAAKtG,eAAe,SAAUX,GAC9BiH,EAAKtG,eAAe,QAASgH,GAC7BV,EAAKtG,eAAe,QAASP,GAC7B6G,EAAKtG,eAAe,SAAU6G,GAC9BL,EAAIxG,eAAe,MAAO5J,GAC1BoQ,EAAIxG,eAAe,MAAO4G,GAC1BJ,EAAIxG,eAAe,OAAQiH,GAC3BC,GAAY,GAMR3D,EAAMb,YAAgB4D,EAAKjQ,iBAAkBiQ,EAAKjQ,eAAe8Q,WAAYH,KA9BnF,SAAS5Q,IACPqK,EAAM,SACN6F,EAAK3P,MAhBH4M,EAAM/D,WAAYjJ,EAAQC,SAASiQ,GAAYD,EAAIrQ,KAAK,MAAOsQ,GACnEH,EAAKrI,GAAG,SAAU4I,GAsBlB,IAAIG,EAwFN,SAAqBR,GACnB,OAAO,WACL,IAAIjD,EAAQiD,EAAIvP,eAChBwJ,EAAM,cAAe8C,EAAMb,YACvBa,EAAMb,YAAYa,EAAMb,aAEH,IAArBa,EAAMb,YAAoBvC,EAAgBqG,EAAK,UACjDjD,EAAMxB,SAAU,EAChBmD,EAAKsB,KAhGKY,CAAYZ,GAC1BF,EAAKrI,GAAG,QAAS+I,GACjB,IAAIE,GAAY,EAwBhB,SAASD,EAAO9D,GACd1C,EAAM,UACN,IAAIiF,EAAMY,EAAKtC,MAAMb,GACrB1C,EAAM,aAAciF,IAER,IAARA,KAKwB,IAArBnC,EAAMzB,YAAoByB,EAAM1B,QAAUyE,GAAQ/C,EAAMzB,WAAa,IAAqC,IAAhC/M,EAAQwO,EAAM1B,MAAOyE,MAAkBY,IACpHzG,EAAM,8BAA+B8C,EAAMb,YAC3Ca,EAAMb,cAGR8D,EAAIa,SAMR,SAAS5H,EAAQ6D,GACf7C,EAAM,UAAW6C,GACjBsD,IACAN,EAAKtG,eAAe,QAASP,GACU,IAAnCU,EAAgBmG,EAAM,UAAgB/E,EAAe+E,EAAMhD,GAMjE,SAAS5D,IACP4G,EAAKtG,eAAe,SAAUX,GAC9BuH,IAKF,SAASvH,IACPoB,EAAM,YACN6F,EAAKtG,eAAe,QAASN,GAC7BkH,IAKF,SAASA,IACPnG,EAAM,UACN+F,EAAII,OAAON,GAWb,OA7DAE,EAAIvI,GAAG,OAAQgJ,GAtkBjB,SAAyB7G,EAASkH,EAAOC,GAGvC,GAAuC,oBAA5BnH,EAAQoH,gBAAgC,OAAOpH,EAAQoH,gBAAgBF,EAAOC,GAKpFnH,EAAQqH,SAAYrH,EAAQqH,QAAQH,GAAuCjU,MAAMC,QAAQ8M,EAAQqH,QAAQH,IAASlH,EAAQqH,QAAQH,GAAOnD,QAAQoD,GAASnH,EAAQqH,QAAQH,GAAS,CAACC,EAAInH,EAAQqH,QAAQH,IAA5JlH,EAAQnC,GAAGqJ,EAAOC,GA6lBnEC,CAAgBlB,EAAM,QAAS7G,GAO/B6G,EAAKnQ,KAAK,QAASuJ,GAQnB4G,EAAKnQ,KAAK,SAAUkJ,GAQpBiH,EAAKpC,KAAK,OAAQsC,GAEbjD,EAAMxB,UACTtB,EAAM,eACN+F,EAAIlB,UAGCgB,GAgBT5Q,EAAS9C,UAAUgU,OAAS,SAAUN,GACpC,IAAI/C,EAAQ7Q,KAAKuE,eACb6P,EAAa,CACfC,YAAY,GAGd,GAAyB,IAArBxD,EAAMzB,WAAkB,OAAOpP,KAEnC,GAAyB,IAArB6Q,EAAMzB,WAER,OAAIwE,GAAQA,IAAS/C,EAAM1B,QACtByE,IAAMA,EAAO/C,EAAM1B,OAExB0B,EAAM1B,MAAQ,KACd0B,EAAMzB,WAAa,EACnByB,EAAMxB,SAAU,EACZuE,GAAMA,EAAKpC,KAAK,SAAUxR,KAAMoU,IANKpU,KAW3C,IAAK4T,EAAM,CAET,IAAIoB,EAAQnE,EAAM1B,MACdtO,EAAMgQ,EAAMzB,WAChByB,EAAM1B,MAAQ,KACd0B,EAAMzB,WAAa,EACnByB,EAAMxB,SAAU,EAEhB,IAAK,IAAIrO,EAAI,EAAGA,EAAIH,EAAKG,IACvBgU,EAAMhU,GAAGwQ,KAAK,SAAUxR,KAAM,CAC5BqU,YAAY,IAIhB,OAAOrU,KAIT,IAAIiV,EAAQ5S,EAAQwO,EAAM1B,MAAOyE,GACjC,OAAe,IAAXqB,IACJpE,EAAM1B,MAAM+F,OAAOD,EAAO,GAC1BpE,EAAMzB,YAAc,EACK,IAArByB,EAAMzB,aAAkByB,EAAM1B,MAAQ0B,EAAM1B,MAAM,IACtDyE,EAAKpC,KAAK,SAAUxR,KAAMoU,IAJDpU,MAU3BgD,EAAS9C,UAAUqL,GAAK,SAAU4J,EAAIN,GACpC,IAAIO,EAAM1J,EAAOxL,UAAUqL,GAAGxL,KAAKC,KAAMmV,EAAIN,GACzChE,EAAQ7Q,KAAKuE,eAuBjB,MArBW,SAAP4Q,GAGFtE,EAAMnB,kBAAoB1P,KAAK2S,cAAc,YAAc,GAErC,IAAlB9B,EAAMxB,SAAmBrP,KAAK4S,UAClB,aAAPuC,IACJtE,EAAM/D,YAAe+D,EAAMnB,oBAC9BmB,EAAMnB,kBAAoBmB,EAAMrB,cAAe,EAC/CqB,EAAMxB,SAAU,EAChBwB,EAAMpB,iBAAkB,EACxB1B,EAAM,cAAe8C,EAAM/P,OAAQ+P,EAAMvB,SAErCuB,EAAM/P,OACRgQ,EAAa9Q,MACH6Q,EAAMvB,SAChBzL,EAAQC,SAAS+O,EAAkB7S,QAKlCoV,GAGTpS,EAAS9C,UAAUmV,YAAcrS,EAAS9C,UAAUqL,GAEpDvI,EAAS9C,UAAUoN,eAAiB,SAAU6H,EAAIN,GAChD,IAAIO,EAAM1J,EAAOxL,UAAUoN,eAAevN,KAAKC,KAAMmV,EAAIN,GAYzD,MAVW,aAAPM,GAOFtR,EAAQC,SAAS4O,EAAyB1S,MAGrCoV,GAGTpS,EAAS9C,UAAUoV,mBAAqB,SAAUH,GAChD,IAAIC,EAAM1J,EAAOxL,UAAUoV,mBAAmB7I,MAAMzM,KAAMsM,WAY1D,MAVW,aAAP6I,QAA4BnT,IAAPmT,GAOvBtR,EAAQC,SAAS4O,EAAyB1S,MAGrCoV,GAuBTpS,EAAS9C,UAAU0S,OAAS,WAC1B,IAAI/B,EAAQ7Q,KAAKuE,eAYjB,OAVKsM,EAAMxB,UACTtB,EAAM,UAIN8C,EAAMxB,SAAWwB,EAAMnB,kBAQ3B,SAAgBxD,EAAQ2E,GACjBA,EAAMlB,kBACTkB,EAAMlB,iBAAkB,EACxB9L,EAAQC,SAASgP,EAAS5G,EAAQ2E,IAVlC+B,CAAO5S,KAAM6Q,IAGfA,EAAMjB,QAAS,EACR5P,MAuBTgD,EAAS9C,UAAUyU,MAAQ,WAUzB,OATA5G,EAAM,wBAAyB/N,KAAKuE,eAAe8K,UAEf,IAAhCrP,KAAKuE,eAAe8K,UACtBtB,EAAM,SACN/N,KAAKuE,eAAe8K,SAAU,EAC9BrP,KAAKwR,KAAK,UAGZxR,KAAKuE,eAAeqL,QAAS,EACtB5P,MAeTgD,EAAS9C,UAAUqV,KAAO,SAAUrJ,GAClC,IAAIsJ,EAAQxV,KAER6Q,EAAQ7Q,KAAKuE,eACbqL,GAAS,EA0Bb,IAAK,IAAI5O,KAzBTkL,EAAOX,GAAG,OAAO,WAGf,GAFAwC,EAAM,eAEF8C,EAAMX,UAAYW,EAAMjN,MAAO,CACjC,IAAI6M,EAAQI,EAAMX,QAAQjM,MACtBwM,GAASA,EAAM3P,QAAQ0U,EAAM1S,KAAK2N,GAGxC+E,EAAM1S,KAAK,SAEboJ,EAAOX,GAAG,QAAQ,SAAUkF,IAC1B1C,EAAM,gBACF8C,EAAMX,UAASO,EAAQI,EAAMX,QAAQoB,MAAMb,KAE3CI,EAAM7B,YAAyB,OAAVyB,QAA4BzO,IAAVyO,MAAuCI,EAAM7B,YAAgByB,GAAUA,EAAM3P,UAE9G0U,EAAM1S,KAAK2N,KAGnBb,GAAS,EACT1D,EAAOyI,cAKGzI,OACIlK,IAAZhC,KAAKgB,IAAyC,oBAAdkL,EAAOlL,KACzChB,KAAKgB,GAAK,SAAoBoC,GAC5B,OAAO,WACL,OAAO8I,EAAO9I,GAAQqJ,MAAMP,EAAQI,YAF9B,CAIRtL,IAKN,IAAK,IAAIsR,EAAI,EAAGA,EAAIxD,EAAahO,OAAQwR,IACvCpG,EAAOX,GAAGuD,EAAawD,GAAItS,KAAKwR,KAAKiE,KAAKzV,KAAM8O,EAAawD,KAc/D,OATAtS,KAAKqQ,MAAQ,SAAUiC,GACrBvE,EAAM,gBAAiBuE,GAEnB1C,IACFA,GAAS,EACT1D,EAAO0G,WAIJ5S,MAGa,oBAAX0V,SACT1S,EAAS9C,UAAUwV,OAAOC,eAAiB,WAKzC,YAJ0C3T,IAAtCmM,IACFA,EAAoClL,EAAQ,MAGvCkL,EAAkCnO,QAI7CG,OAAO+D,eAAelB,EAAS9C,UAAW,wBAAyB,CAIjEiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAKuE,eAAeF,iBAG/BlE,OAAO+D,eAAelB,EAAS9C,UAAW,iBAAkB,CAI1DiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAKuE,gBAAkBvE,KAAKuE,eAAe2K,UAGtD/O,OAAO+D,eAAelB,EAAS9C,UAAW,kBAAmB,CAI3DiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAKuE,eAAe8K,SAE7B5K,IAAK,SAAaoM,GACZ7Q,KAAKuE,iBACPvE,KAAKuE,eAAe8K,QAAUwB,MAKpC7N,EAAS4S,UAAY7C,EACrB5S,OAAO+D,eAAelB,EAAS9C,UAAW,iBAAkB,CAI1DiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAKuE,eAAezD,UAoDT,oBAAX4U,SACT1S,EAASoL,KAAO,SAAUyH,EAAU1J,GAKlC,YAJanK,IAAToM,IACFA,EAAOnL,EAAQ,MAGVmL,EAAKpL,EAAU6S,EAAU1J,O,4CCzlCpC3J,EAAOC,QAAUQ,EAAQ,IAAUuK,c,kCCAnC,YAuDA,SAASsI,EAAoB9R,EAAM6G,GACjCkL,EAAY/R,EAAM6G,GAClBmL,EAAYhS,GAGd,SAASgS,EAAYhS,GACfA,EAAKL,iBAAmBK,EAAKL,eAAekM,WAC5C7L,EAAKO,iBAAmBP,EAAKO,eAAesL,WAChD7L,EAAKwN,KAAK,SAsBZ,SAASuE,EAAY/R,EAAM6G,GACzB7G,EAAKwN,KAAK,QAAS3G,GAcrBrI,EAAOC,QAAU,CACf6N,QAnGF,SAAiBzF,EAAK+G,GACpB,IAAI4D,EAAQxV,KAERiW,EAAoBjW,KAAKuE,gBAAkBvE,KAAKuE,eAAeC,UAC/D0R,EAAoBlW,KAAK2D,gBAAkB3D,KAAK2D,eAAea,UAEnE,OAAIyR,GAAqBC,GACnBtE,EACFA,EAAG/G,GACMA,IACJ7K,KAAK2D,eAEE3D,KAAK2D,eAAewS,eAC9BnW,KAAK2D,eAAewS,cAAe,EACnCtS,EAAQC,SAASiS,EAAa/V,KAAM6K,IAHpChH,EAAQC,SAASiS,EAAa/V,KAAM6K,IAOjC7K,OAKLA,KAAKuE,iBACPvE,KAAKuE,eAAeC,WAAY,GAI9BxE,KAAK2D,iBACP3D,KAAK2D,eAAea,WAAY,GAGlCxE,KAAKuQ,SAAS1F,GAAO,MAAM,SAAUA,IAC9B+G,GAAM/G,EACJ2K,EAAM7R,eAEC6R,EAAM7R,eAAewS,aAI/BtS,EAAQC,SAASkS,EAAaR,IAH9BA,EAAM7R,eAAewS,cAAe,EACpCtS,EAAQC,SAASgS,EAAqBN,EAAO3K,IAH7ChH,EAAQC,SAASgS,EAAqBN,EAAO3K,GAOtC+G,GACT/N,EAAQC,SAASkS,EAAaR,GAC9B5D,EAAG/G,IAEHhH,EAAQC,SAASkS,EAAaR,MAI3BxV,OAkDP2R,UApCF,WACM3R,KAAKuE,iBACPvE,KAAKuE,eAAeC,WAAY,EAChCxE,KAAKuE,eAAe+K,SAAU,EAC9BtP,KAAKuE,eAAeX,OAAQ,EAC5B5D,KAAKuE,eAAeuI,YAAa,GAG/B9M,KAAK2D,iBACP3D,KAAK2D,eAAea,WAAY,EAChCxE,KAAK2D,eAAeC,OAAQ,EAC5B5D,KAAK2D,eAAeyS,QAAS,EAC7BpW,KAAK2D,eAAe0S,aAAc,EAClCrW,KAAK2D,eAAe2S,aAAc,EAClCtW,KAAK2D,eAAekI,UAAW,EAC/B7L,KAAK2D,eAAewS,cAAe,IAsBrCtH,eAdF,SAAwB3C,EAAQrB,GAM9B,IAAI0L,EAASrK,EAAO3H,eAChB8O,EAASnH,EAAOvI,eAChB4S,GAAUA,EAAOzG,aAAeuD,GAAUA,EAAOvD,YAAa5D,EAAOoE,QAAQzF,GAAUqB,EAAOsF,KAAK,QAAS3G,O,mDC/FlH,IAAI2L,EAAwBvT,EAAQ,KAAmB/D,MAAMsX,sBAsB7DhU,EAAOC,QAAU,CACf8L,iBAjBF,SAA0BsC,EAAOxN,EAASoT,EAAW1H,GACnD,IAAI2H,EALN,SAA2BrT,EAAS0L,EAAU0H,GAC5C,OAAgC,MAAzBpT,EAAQgB,cAAwBhB,EAAQgB,cAAgB0K,EAAW1L,EAAQoT,GAAa,KAIrFE,CAAkBtT,EAAS0L,EAAU0H,GAE/C,GAAW,MAAPC,EAAa,CACf,IAAME,SAASF,IAAQpM,KAAKuM,MAAMH,KAASA,GAAQA,EAAM,EAEvD,MAAM,IAAIF,EADCzH,EAAW0H,EAAY,gBACIC,GAGxC,OAAOpM,KAAKuM,MAAMH,GAIpB,OAAO7F,EAAM7B,WAAa,GAAK,S,kCCrBjC,cAqCA,SAAS8H,EAAcjG,GACrB,IAAI2E,EAAQxV,KAEZA,KAAKkS,KAAO,KACZlS,KAAK+W,MAAQ,KAEb/W,KAAKgX,OAAS,YAimBhB,SAAwBC,EAASpG,EAAOhG,GACtC,IAAIkM,EAAQE,EAAQF,MACpBE,EAAQF,MAAQ,KAEhB,KAAOA,GAAO,CACZ,IAAInF,EAAKmF,EAAM/O,SACf6I,EAAMqG,YACNtF,EAAG/G,GACHkM,EAAQA,EAAM7E,KAIhBrB,EAAMsG,mBAAmBjF,KAAO+E,EA5mB9BG,CAAe5B,EAAO3E,IAQ1B,IAAI9N,EA3BJP,EAAOC,QAAUS,EA8BjBA,EAASmU,cAAgBA,EAGzB,IAAIC,EAAe,CACjBC,UAAWtU,EAAQ,MAMjByI,EAASzI,EAAQ,KAIjBwI,EAASxI,EAAQ,GAAUwI,OAE3BmC,EAAgBC,EAAOC,YAAc,aAUzC,IAkII0J,EAlIAlJ,EAAcrL,EAAQ,KAGtBsL,EADWtL,EAAQ,KACSsL,iBAE5BC,EAAiBvL,EAAQ,KAAa/D,MACtCuP,EAAuBD,EAAeC,qBACtCE,EAA6BH,EAAeG,2BAC5C8I,EAAwBjJ,EAAeiJ,sBACvCC,EAAyBlJ,EAAekJ,uBACxCC,EAAuBnJ,EAAemJ,qBACtCC,EAAyBpJ,EAAeoJ,uBACxCC,EAA6BrJ,EAAeqJ,2BAC5CC,EAAuBtJ,EAAesJ,qBAEtCjJ,EAAiBP,EAAYO,eAIjC,SAASkJ,KAET,SAASV,EAAchU,EAAS6I,EAAQ6C,GACtChM,EAASA,GAAUE,EAAQ,KAC3BI,EAAUA,GAAW,GAMG,mBAAb0L,IAAwBA,EAAW7C,aAAkBnJ,GAGhE/C,KAAKgP,aAAe3L,EAAQ2L,WACxBD,IAAU/O,KAAKgP,WAAahP,KAAKgP,cAAgB3L,EAAQ2U,oBAI7DhY,KAAKqE,cAAgBkK,EAAiBvO,KAAMqD,EAAS,wBAAyB0L,GAE9E/O,KAAKqW,aAAc,EAEnBrW,KAAKyU,WAAY,EAEjBzU,KAAKoW,QAAS,EAEdpW,KAAK4D,OAAQ,EAEb5D,KAAK6L,UAAW,EAEhB7L,KAAKwE,WAAY,EAIjB,IAAIyT,GAAqC,IAA1B5U,EAAQ6U,cACvBlY,KAAKkY,eAAiBD,EAItBjY,KAAK+P,gBAAkB1M,EAAQ0M,iBAAmB,OAIlD/P,KAAKc,OAAS,EAEdd,KAAKmY,SAAU,EAEfnY,KAAKoY,OAAS,EAKdpY,KAAKuP,MAAO,EAIZvP,KAAKqY,kBAAmB,EAExBrY,KAAKsY,QAAU,SAAU1H,IA6R3B,SAAiB1E,EAAQ0E,GACvB,IAAIC,EAAQ3E,EAAOvI,eACf4L,EAAOsB,EAAMtB,KACbqC,EAAKf,EAAM0H,QACf,GAAkB,oBAAP3G,EAAmB,MAAM,IAAI6F,EAExC,GAbF,SAA4B5G,GAC1BA,EAAMsH,SAAU,EAChBtH,EAAM0H,QAAU,KAChB1H,EAAM/P,QAAU+P,EAAM2H,SACtB3H,EAAM2H,SAAW,EAQjBC,CAAmB5H,GACfD,GArCN,SAAsB1E,EAAQ2E,EAAOtB,EAAMqB,EAAIgB,KAC3Cf,EAAMqG,UAEJ3H,GAGF1L,EAAQC,SAAS8N,EAAIhB,GAGrB/M,EAAQC,SAAS4U,EAAaxM,EAAQ2E,GACtC3E,EAAOvI,eAAewS,cAAe,EACrCtH,EAAe3C,EAAQ0E,KAIvBgB,EAAGhB,GACH1E,EAAOvI,eAAewS,cAAe,EACrCtH,EAAe3C,EAAQ0E,GAGvB8H,EAAYxM,EAAQ2E,IAiBd8H,CAAazM,EAAQ2E,EAAOtB,EAAMqB,EAAIgB,OAAS,CAErD,IAAI/F,EAAW+M,EAAW/H,IAAU3E,EAAO1H,UAEtCqH,GAAagF,EAAMuH,QAAWvH,EAAMwH,mBAAoBxH,EAAMgI,iBACjEC,EAAY5M,EAAQ2E,GAGlBtB,EACF1L,EAAQC,SAASiV,EAAY7M,EAAQ2E,EAAOhF,EAAU+F,GAEtDmH,EAAW7M,EAAQ2E,EAAOhF,EAAU+F,IA7StC0G,CAAQpM,EAAQ0E,IAIlB5Q,KAAKuY,QAAU,KAEfvY,KAAKwY,SAAW,EAChBxY,KAAK6Y,gBAAkB,KACvB7Y,KAAKgZ,oBAAsB,KAG3BhZ,KAAKkX,UAAY,EAGjBlX,KAAKsW,aAAc,EAEnBtW,KAAKmW,cAAe,EAEpBnW,KAAK6P,WAAkC,IAAtBxM,EAAQwM,UAEzB7P,KAAK8P,cAAgBzM,EAAQyM,YAE7B9P,KAAKiZ,qBAAuB,EAG5BjZ,KAAKmX,mBAAqB,IAAIL,EAAc9W,MA4C9C,SAASkD,EAASG,GAUhB,IAAI0L,EAAW/O,gBATf+C,EAASA,GAAUE,EAAQ,MAU3B,IAAK8L,IAAayI,EAAgBzX,KAAKmD,EAAUlD,MAAO,OAAO,IAAIkD,EAASG,GAC5ErD,KAAK2D,eAAiB,IAAI0T,EAAchU,EAASrD,KAAM+O,GAEvD/O,KAAKwD,UAAW,EAEZH,IAC2B,oBAAlBA,EAAQiO,QAAsBtR,KAAKkZ,OAAS7V,EAAQiO,OACjC,oBAAnBjO,EAAQ8V,SAAuBnZ,KAAKoZ,QAAU/V,EAAQ8V,QAClC,oBAApB9V,EAAQiN,UAAwBtQ,KAAKuQ,SAAWlN,EAAQiN,SACtC,oBAAlBjN,EAAQgW,QAAsBrZ,KAAKsZ,OAASjW,EAAQgW,QAGjE3N,EAAO3L,KAAKC,MAwJd,SAASuZ,EAAQrN,EAAQ2E,EAAOsI,EAAQtY,EAAK4P,EAAON,EAAUyB,GAC5Df,EAAM2H,SAAW3X,EACjBgQ,EAAM0H,QAAU3G,EAChBf,EAAMsH,SAAU,EAChBtH,EAAMtB,MAAO,EACTsB,EAAMrM,UAAWqM,EAAMyH,QAAQ,IAAIX,EAAqB,UAAmBwB,EAAQjN,EAAOkN,QAAQ3I,EAAOI,EAAMyH,SAAcpM,EAAOgN,OAAOzI,EAAON,EAAUU,EAAMyH,SACtKzH,EAAMtB,MAAO,EAwDf,SAASwJ,EAAW7M,EAAQ2E,EAAOhF,EAAU+F,GACtC/F,GASP,SAAsBK,EAAQ2E,GACP,IAAjBA,EAAM/P,QAAgB+P,EAAM4D,YAC9B5D,EAAM4D,WAAY,EAClBvI,EAAOsF,KAAK,UAZCgI,CAAatN,EAAQ2E,GACpCA,EAAMqG,YACNtF,IACA8G,EAAYxM,EAAQ2E,GActB,SAASiI,EAAY5M,EAAQ2E,GAC3BA,EAAMwH,kBAAmB,EACzB,IAAItB,EAAQlG,EAAMgI,gBAElB,GAAI3M,EAAOkN,SAAWrC,GAASA,EAAM7E,KAAM,CAEzC,IAAIsB,EAAI3C,EAAMoI,qBACV/J,EAAS,IAAIvO,MAAM6S,GACnBiG,EAAS5I,EAAMsG,mBACnBsC,EAAO1C,MAAQA,EAIf,IAHA,IAAI2C,EAAQ,EACRC,GAAa,EAEV5C,GACL7H,EAAOwK,GAAS3C,EACXA,EAAM6C,QAAOD,GAAa,GAC/B5C,EAAQA,EAAM7E,KACdwH,GAAS,EAGXxK,EAAOyK,WAAaA,EACpBJ,EAAQrN,EAAQ2E,GAAO,EAAMA,EAAM/P,OAAQoO,EAAQ,GAAIuK,EAAOzC,QAG9DnG,EAAMqG,YACNrG,EAAMmI,oBAAsB,KAExBS,EAAOvH,MACTrB,EAAMsG,mBAAqBsC,EAAOvH,KAClCuH,EAAOvH,KAAO,MAEdrB,EAAMsG,mBAAqB,IAAIL,EAAcjG,GAG/CA,EAAMoI,qBAAuB,MACxB,CAEL,KAAOlC,GAAO,CACZ,IAAItG,EAAQsG,EAAMtG,MACdN,EAAW4G,EAAM5G,SACjByB,EAAKmF,EAAM/O,SASf,GAPAuR,EAAQrN,EAAQ2E,GAAO,EADbA,EAAM7B,WAAa,EAAIyB,EAAM3P,OACJ2P,EAAON,EAAUyB,GACpDmF,EAAQA,EAAM7E,KACdrB,EAAMoI,uBAKFpI,EAAMsH,QACR,MAIU,OAAVpB,IAAgBlG,EAAMmI,oBAAsB,MAGlDnI,EAAMgI,gBAAkB9B,EACxBlG,EAAMwH,kBAAmB,EA2C3B,SAASO,EAAW/H,GAClB,OAAOA,EAAMuF,QAA2B,IAAjBvF,EAAM/P,QAA0C,OAA1B+P,EAAMgI,kBAA6BhI,EAAMhF,WAAagF,EAAMsH,QAG3G,SAAS0B,EAAU3N,EAAQ2E,GACzB3E,EAAOoN,QAAO,SAAUzO,GACtBgG,EAAMqG,YAEFrM,GACFgE,EAAe3C,EAAQrB,GAGzBgG,EAAMyF,aAAc,EACpBpK,EAAOsF,KAAK,aACZkH,EAAYxM,EAAQ2E,MAiBxB,SAAS6H,EAAYxM,EAAQ2E,GAC3B,IAAIiJ,EAAOlB,EAAW/H,GAEtB,GAAIiJ,IAhBN,SAAmB5N,EAAQ2E,GACpBA,EAAMyF,aAAgBzF,EAAMwF,cACF,oBAAlBnK,EAAOoN,QAA0BzI,EAAMrM,WAKhDqM,EAAMyF,aAAc,EACpBpK,EAAOsF,KAAK,eALZX,EAAMqG,YACNrG,EAAMwF,aAAc,EACpBxS,EAAQC,SAAS+V,EAAW3N,EAAQ2E,KAYtCkJ,CAAU7N,EAAQ2E,GAEM,IAApBA,EAAMqG,YACRrG,EAAMhF,UAAW,EACjBK,EAAOsF,KAAK,UAERX,EAAMf,cAAa,CAGrB,IAAIyG,EAASrK,EAAO3H,iBAEfgS,GAAUA,EAAOzG,aAAeyG,EAAOzJ,aAC1CZ,EAAOoE,UAMf,OAAOwJ,EA3hBT7W,EAAQ,EAARA,CAAoBC,EAAUwI,GAyF9B2L,EAAcnX,UAAUoE,UAAY,WAIlC,IAHA,IAAI0V,EAAUha,KAAK6Y,gBACfoB,EAAM,GAEHD,GACLC,EAAInX,KAAKkX,GACTA,EAAUA,EAAQ9H,KAGpB,OAAO+H,GAGT,WACE,IACE9Z,OAAO+D,eAAemT,EAAcnX,UAAW,SAAU,CACvDkE,IAAKkT,EAAaC,WAAU,WAC1B,OAAOvX,KAAKsE,cACX,6EAAmF,aAExF,MAAO4V,KAPX,GAcsB,oBAAXxE,QAAyBA,OAAOyE,aAAiE,oBAA3CC,SAASla,UAAUwV,OAAOyE,cACzF3C,EAAkB4C,SAASla,UAAUwV,OAAOyE,aAC5Cha,OAAO+D,eAAehB,EAAUwS,OAAOyE,YAAa,CAClD9Y,MAAO,SAAegZ,GACpB,QAAI7C,EAAgBzX,KAAKC,KAAMqa,IAC3Bra,OAASkD,IACNmX,GAAUA,EAAO1W,0BAA0B0T,OAItDG,EAAkB,SAAyB6C,GACzC,OAAOA,aAAkBra,MA+B7BkD,EAAShD,UAAUyT,KAAO,WACxB9E,EAAe7O,KAAM,IAAI0X,IA+B3BxU,EAAShD,UAAUoR,MAAQ,SAAUb,EAAON,EAAUyB,GACpD,IAnNqBhP,EAmNjBiO,EAAQ7Q,KAAK2D,eACbqP,GAAM,EAEN4G,GAAS/I,EAAM7B,aAtNEpM,EAsN0B6N,EArNxChF,EAAOwF,SAASrO,IAAQA,aAAegL,GAsO9C,OAfIgM,IAAUnO,EAAOwF,SAASR,KAC5BA,EA7NJ,SAA6BA,GAC3B,OAAOhF,EAAO2C,KAAKqC,GA4NTW,CAAoBX,IAGN,oBAAbN,IACTyB,EAAKzB,EACLA,EAAW,MAGTyJ,EAAOzJ,EAAW,SAAmBA,IAAUA,EAAWU,EAAMd,iBAClD,oBAAP6B,IAAmBA,EAAKmG,GAC/BlH,EAAMuF,OA7CZ,SAAuBlK,EAAQ0F,GAC7B,IAAIhB,EAAK,IAAIiH,EAEbhJ,EAAe3C,EAAQ0E,GACvB/M,EAAQC,SAAS8N,EAAIhB,GAyCH0J,CAActa,KAAM4R,IAAagI,GAnCrD,SAAoB1N,EAAQ2E,EAAOJ,EAAOmB,GACxC,IAAIhB,EAQJ,OANc,OAAVH,EACFG,EAAK,IAAIgH,EACiB,kBAAVnH,GAAuBI,EAAM7B,aAC7C4B,EAAK,IAAInC,EAAqB,QAAS,CAAC,SAAU,UAAWgC,KAG3DG,IACF/B,EAAe3C,EAAQ0E,GACvB/M,EAAQC,SAAS8N,EAAIhB,IACd,GAuBmD2J,CAAWva,KAAM6Q,EAAOJ,EAAOmB,MACzFf,EAAMqG,YACNlE,EAwDJ,SAAuB9G,EAAQ2E,EAAO+I,EAAOnJ,EAAON,EAAUyB,GAC5D,IAAKgI,EAAO,CACV,IAAIY,EAtBR,SAAqB3J,EAAOJ,EAAON,GAC5BU,EAAM7B,aAAsC,IAAxB6B,EAAMqH,eAA4C,kBAAVzH,IAC/DA,EAAQhF,EAAO2C,KAAKqC,EAAON,IAG7B,OAAOM,EAiBUgK,CAAY5J,EAAOJ,EAAON,GAErCM,IAAU+J,IACZZ,GAAQ,EACRzJ,EAAW,SACXM,EAAQ+J,GAIZ,IAAI3Z,EAAMgQ,EAAM7B,WAAa,EAAIyB,EAAM3P,OACvC+P,EAAM/P,QAAUD,EAChB,IAAImS,EAAMnC,EAAM/P,OAAS+P,EAAMxM,cAE1B2O,IAAKnC,EAAM4D,WAAY,GAE5B,GAAI5D,EAAMsH,SAAWtH,EAAMuH,OAAQ,CACjC,IAAIsC,EAAO7J,EAAMmI,oBACjBnI,EAAMmI,oBAAsB,CAC1BvI,MAAOA,EACPN,SAAUA,EACVyJ,MAAOA,EACP5R,SAAU4J,EACVM,KAAM,MAGJwI,EACFA,EAAKxI,KAAOrB,EAAMmI,oBAElBnI,EAAMgI,gBAAkBhI,EAAMmI,oBAGhCnI,EAAMoI,sBAAwB,OAE9BM,EAAQrN,EAAQ2E,GAAO,EAAOhQ,EAAK4P,EAAON,EAAUyB,GAGtD,OAAOoB,EA9FC2H,CAAc3a,KAAM6Q,EAAO+I,EAAOnJ,EAAON,EAAUyB,IAEpDoB,GAGT9P,EAAShD,UAAU0a,KAAO,WACxB5a,KAAK2D,eAAeyU,UAGtBlV,EAAShD,UAAU2a,OAAS,WAC1B,IAAIhK,EAAQ7Q,KAAK2D,eAEbkN,EAAMuH,SACRvH,EAAMuH,SACDvH,EAAMsH,SAAYtH,EAAMuH,QAAWvH,EAAMwH,mBAAoBxH,EAAMgI,iBAAiBC,EAAY9Y,KAAM6Q,KAI/G3N,EAAShD,UAAU4a,mBAAqB,SAA4B3K,GAGlE,GADwB,kBAAbA,IAAuBA,EAAWA,EAAS4K,iBAChD,CAAC,MAAO,OAAQ,QAAS,QAAS,SAAU,SAAU,OAAQ,QAAS,UAAW,WAAY,OAAO1Y,SAAS8N,EAAW,IAAI4K,gBAAkB,GAAI,MAAM,IAAIjD,EAAqB3H,GAExL,OADAnQ,KAAK2D,eAAeoM,gBAAkBI,EAC/BnQ,MAGTG,OAAO+D,eAAehB,EAAShD,UAAW,iBAAkB,CAI1DiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAK2D,gBAAkB3D,KAAK2D,eAAeW,eAYtDnE,OAAO+D,eAAehB,EAAShD,UAAW,wBAAyB,CAIjEiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAK2D,eAAeU,iBA4L/BnB,EAAShD,UAAUgZ,OAAS,SAAUzI,EAAON,EAAUyB,GACrDA,EAAG,IAAIjD,EAA2B,cAGpCzL,EAAShD,UAAUkZ,QAAU,KAE7BlW,EAAShD,UAAU+D,IAAM,SAAUwM,EAAON,EAAUyB,GAClD,IAAIf,EAAQ7Q,KAAK2D,eAoBjB,MAlBqB,oBAAV8M,GACTmB,EAAKnB,EACLA,EAAQ,KACRN,EAAW,MACkB,oBAAbA,IAChByB,EAAKzB,EACLA,EAAW,MAGC,OAAVM,QAA4BzO,IAAVyO,GAAqBzQ,KAAKsR,MAAMb,EAAON,GAEzDU,EAAMuH,SACRvH,EAAMuH,OAAS,EACfpY,KAAK6a,UAIFhK,EAAMuF,QAsEb,SAAqBlK,EAAQ2E,EAAOe,GAClCf,EAAMuF,QAAS,EACfsC,EAAYxM,EAAQ2E,GAEhBe,IACEf,EAAMhF,SAAUhI,EAAQC,SAAS8N,GAAS1F,EAAOzI,KAAK,SAAUmO,IAGtEf,EAAMjN,OAAQ,EACdsI,EAAO1I,UAAW,EA/ECwX,CAAYhb,KAAM6Q,EAAOe,GACrC5R,MAGTG,OAAO+D,eAAehB,EAAShD,UAAW,iBAAkB,CAI1DiE,YAAY,EACZC,IAAK,WACH,OAAOpE,KAAK2D,eAAe7C,UAuF/BX,OAAO+D,eAAehB,EAAShD,UAAW,YAAa,CAIrDiE,YAAY,EACZC,IAAK,WACH,YAA4BpC,IAAxBhC,KAAK2D,gBAIF3D,KAAK2D,eAAea,WAE7BC,IAAK,SAAapD,GAGXrB,KAAK2D,iBAMV3D,KAAK2D,eAAea,UAAYnD,MAGpC6B,EAAShD,UAAUoQ,QAAUhC,EAAYgC,QACzCpN,EAAShD,UAAUwR,WAAapD,EAAYqD,UAE5CzO,EAAShD,UAAUqQ,SAAW,SAAU1F,EAAK+G,GAC3CA,EAAG/G,M,yDCxnBLrI,EAAOC,QAAUkJ,EAEjB,IAAI6C,EAAiBvL,EAAQ,KAAa/D,MACtCyP,EAA6BH,EAAeG,2BAC5C8I,EAAwBjJ,EAAeiJ,sBACvCwD,EAAqCzM,EAAeyM,mCACpDC,EAA8B1M,EAAe0M,4BAE7CnY,EAASE,EAAQ,KAIrB,SAASkY,EAAevK,EAAIpF,GAC1B,IAAI4P,EAAKpb,KAAKqb,gBACdD,EAAGE,cAAe,EAClB,IAAI1J,EAAKwJ,EAAG7C,QAEZ,GAAW,OAAP3G,EACF,OAAO5R,KAAKwR,KAAK,QAAS,IAAIiG,GAGhC2D,EAAGG,WAAa,KAChBH,EAAG7C,QAAU,KACD,MAAR/M,GACFxL,KAAK8C,KAAK0I,GACZoG,EAAGhB,GACH,IAAI4K,EAAKxb,KAAKuE,eACdiX,EAAGlM,SAAU,GAETkM,EAAGhM,cAAgBgM,EAAG1a,OAAS0a,EAAGnX,gBACpCrE,KAAKqQ,MAAMmL,EAAGnX,eAIlB,SAASsH,EAAUtI,GACjB,KAAMrD,gBAAgB2L,GAAY,OAAO,IAAIA,EAAUtI,GACvDN,EAAOhD,KAAKC,KAAMqD,GAClBrD,KAAKqb,gBAAkB,CACrBF,eAAgBA,EAAe1F,KAAKzV,MACpCyb,eAAe,EACfH,cAAc,EACd/C,QAAS,KACTgD,WAAY,KACZG,cAAe,MAGjB1b,KAAKuE,eAAeiL,cAAe,EAInCxP,KAAKuE,eAAegL,MAAO,EAEvBlM,IAC+B,oBAAtBA,EAAQsY,YAA0B3b,KAAK4b,WAAavY,EAAQsY,WAC1C,oBAAlBtY,EAAQwY,QAAsB7b,KAAK8b,OAASzY,EAAQwY,QAIjE7b,KAAKuL,GAAG,YAAawO,GAGvB,SAASA,IACP,IAAIvE,EAAQxV,KAEe,oBAAhBA,KAAK8b,QAA0B9b,KAAKuE,eAAeC,UAK5DuX,EAAK/b,KAAM,KAAM,MAJjBA,KAAK8b,QAAO,SAAUlL,EAAIpF,GACxBuQ,EAAKvG,EAAO5E,EAAIpF,MA6DtB,SAASuQ,EAAK7P,EAAQ0E,EAAIpF,GACxB,GAAIoF,EAAI,OAAO1E,EAAOsF,KAAK,QAASZ,GAMpC,GALY,MAARpF,GACFU,EAAOpJ,KAAK0I,GAIVU,EAAOvI,eAAe7C,OAAQ,MAAM,IAAIoa,EAC5C,GAAIhP,EAAOmP,gBAAgBC,aAAc,MAAM,IAAIL,EACnD,OAAO/O,EAAOpJ,KAAK,MA9HrBG,EAAQ,EAARA,CAAoB0I,EAAW5I,GA+D/B4I,EAAUzL,UAAU4C,KAAO,SAAU2N,EAAON,GAE1C,OADAnQ,KAAKqb,gBAAgBI,eAAgB,EAC9B1Y,EAAO7C,UAAU4C,KAAK/C,KAAKC,KAAMyQ,EAAON,IAajDxE,EAAUzL,UAAU0b,WAAa,SAAUnL,EAAON,EAAUyB,GAC1DA,EAAG,IAAIjD,EAA2B,kBAGpChD,EAAUzL,UAAUgZ,OAAS,SAAUzI,EAAON,EAAUyB,GACtD,IAAIwJ,EAAKpb,KAAKqb,gBAKd,GAJAD,EAAG7C,QAAU3G,EACbwJ,EAAGG,WAAa9K,EAChB2K,EAAGM,cAAgBvL,GAEdiL,EAAGE,aAAc,CACpB,IAAIE,EAAKxb,KAAKuE,gBACV6W,EAAGK,eAAiBD,EAAGhM,cAAgBgM,EAAG1a,OAAS0a,EAAGnX,gBAAerE,KAAKqQ,MAAMmL,EAAGnX,iBAO3FsH,EAAUzL,UAAUmQ,MAAQ,SAAUiC,GACpC,IAAI8I,EAAKpb,KAAKqb,gBAEQ,OAAlBD,EAAGG,YAAwBH,EAAGE,aAOhCF,EAAGK,eAAgB,GANnBL,EAAGE,cAAe,EAElBtb,KAAK4b,WAAWR,EAAGG,WAAYH,EAAGM,cAAeN,EAAGD,kBAQxDxP,EAAUzL,UAAUqQ,SAAW,SAAU1F,EAAK+G,GAC5C7O,EAAO7C,UAAUqQ,SAASxQ,KAAKC,KAAM6K,GAAK,SAAUmR,GAClDpK,EAAGoK,Q,kBCzLP,IAAIC,EAEJzZ,EAAOC,QAAoC,oBAAnB2I,eACpBA,eAAeqK,KAAKyG,YAEpB,SAAAtK,GAAE,OAAKqK,IAAYA,EAAUE,QAAQC,YACpCC,KAAKzK,GACL0K,OAAM,SAAAzR,GAAG,OAAI0R,YAAW,WAAQ,MAAM1R,IAAO,Q,iCCNlD,SAAS2R,EAAQnC,EAAQoC,GAAkB,IAAI9Z,EAAOxC,OAAOwC,KAAK0X,GAAS,GAAIla,OAAOuc,sBAAuB,CAAE,IAAIC,EAAUxc,OAAOuc,sBAAsBrC,GAAaoC,IAAgBE,EAAUA,EAAQC,QAAO,SAAUC,GAAO,OAAO1c,OAAO2c,yBAAyBzC,EAAQwC,GAAK1Y,eAAgBxB,EAAKG,KAAK2J,MAAM9J,EAAMga,GAAY,OAAOha,EAI9U,SAASoa,EAAgBna,EAAKC,EAAKxB,GAAiK,OAApJwB,KAAOD,EAAOzC,OAAO+D,eAAetB,EAAKC,EAAK,CAAExB,MAAOA,EAAO8C,YAAY,EAAM6Y,cAAc,EAAMxZ,UAAU,IAAkBZ,EAAIC,GAAOxB,EAAgBuB,EAI3M,SAASqa,EAAkBC,EAAQC,GAAS,IAAK,IAAInc,EAAI,EAAGA,EAAImc,EAAMrc,OAAQE,IAAK,CAAE,IAAIoc,EAAaD,EAAMnc,GAAIoc,EAAWjZ,WAAaiZ,EAAWjZ,aAAc,EAAOiZ,EAAWJ,cAAe,EAAU,UAAWI,IAAYA,EAAW5Z,UAAW,GAAMrD,OAAO+D,eAAegZ,EAAQE,EAAWva,IAAKua,IAI7S,IACI3R,EADWxI,EAAQ,GACDwI,OAGlB4R,EADYpa,EAAQ,KACAoa,QAEpBC,EAASD,GAAWA,EAAQC,QAAU,UAM1C9a,EAAOC,QAEP,WACE,SAAS4L,KArBX,SAAyBkP,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAIlc,UAAU,qCAsB5Gmc,CAAgBzd,KAAMqO,GAEtBrO,KAAKgS,KAAO,KACZhS,KAAK0d,KAAO,KACZ1d,KAAKc,OAAS,EAtBlB,IAAsB0c,EAAaG,EAAYC,EAoM7C,OApMoBJ,EAyBPnP,GAzBoBsP,EAyBR,CAAC,CACxB9a,IAAK,OACLxB,MAAO,SAAc8B,GACnB,IAAI4T,EAAQ,CACVvL,KAAMrI,EACN+O,KAAM,MAEJlS,KAAKc,OAAS,EAAGd,KAAK0d,KAAKxL,KAAO6E,EAAW/W,KAAKgS,KAAO+E,EAC7D/W,KAAK0d,KAAO3G,IACV/W,KAAKc,SAER,CACD+B,IAAK,UACLxB,MAAO,SAAiB8B,GACtB,IAAI4T,EAAQ,CACVvL,KAAMrI,EACN+O,KAAMlS,KAAKgS,MAEO,IAAhBhS,KAAKc,SAAcd,KAAK0d,KAAO3G,GACnC/W,KAAKgS,KAAO+E,IACV/W,KAAKc,SAER,CACD+B,IAAK,QACLxB,MAAO,WACL,GAAoB,IAAhBrB,KAAKc,OAAT,CACA,IAAIkS,EAAMhT,KAAKgS,KAAKxG,KAGpB,OAFoB,IAAhBxL,KAAKc,OAAcd,KAAKgS,KAAOhS,KAAK0d,KAAO,KAAU1d,KAAKgS,KAAOhS,KAAKgS,KAAKE,OAC7ElS,KAAKc,OACAkS,KAER,CACDnQ,IAAK,QACLxB,MAAO,WACLrB,KAAKgS,KAAOhS,KAAK0d,KAAO,KACxB1d,KAAKc,OAAS,IAEf,CACD+B,IAAK,OACLxB,MAAO,SAAcwc,GACnB,GAAoB,IAAhB7d,KAAKc,OAAc,MAAO,GAI9B,IAHA,IAAIiR,EAAI/R,KAAKgS,KACTgB,EAAM,GAAKjB,EAAEvG,KAEVuG,EAAIA,EAAEG,MACXc,GAAO6K,EAAI9L,EAAEvG,KAGf,OAAOwH,IAER,CACDnQ,IAAK,SACLxB,MAAO,SAAgBiR,GACrB,GAAoB,IAAhBtS,KAAKc,OAAc,OAAO2K,EAAOqS,MAAM,GAK3C,IAJA,IArEchK,EAAKoJ,EAAQa,EAqEvB/K,EAAMvH,EAAOuS,YAAY1L,IAAM,GAC/BP,EAAI/R,KAAKgS,KACThR,EAAI,EAED+Q,GAzEO+B,EA0ED/B,EAAEvG,KA1EI0R,EA0EElK,EA1EM+K,EA0ED/c,EAzE9ByK,EAAOvL,UAAU+d,KAAKle,KAAK+T,EAAKoJ,EAAQa,GA0ElC/c,GAAK+Q,EAAEvG,KAAK1K,OACZiR,EAAIA,EAAEG,KAGR,OAAOc,IAGR,CACDnQ,IAAK,UACLxB,MAAO,SAAiBiR,EAAG4L,GACzB,IAAIlL,EAcJ,OAZIV,EAAItS,KAAKgS,KAAKxG,KAAK1K,QAErBkS,EAAMhT,KAAKgS,KAAKxG,KAAKrK,MAAM,EAAGmR,GAC9BtS,KAAKgS,KAAKxG,KAAOxL,KAAKgS,KAAKxG,KAAKrK,MAAMmR,IAGtCU,EAFSV,IAAMtS,KAAKgS,KAAKxG,KAAK1K,OAExBd,KAAKiT,QAGLiL,EAAale,KAAKme,WAAW7L,GAAKtS,KAAKoe,WAAW9L,GAGnDU,IAER,CACDnQ,IAAK,QACLxB,MAAO,WACL,OAAOrB,KAAKgS,KAAKxG,OAGlB,CACD3I,IAAK,aACLxB,MAAO,SAAoBiR,GACzB,IAAIP,EAAI/R,KAAKgS,KACTqM,EAAI,EACJrL,EAAMjB,EAAEvG,KAGZ,IAFA8G,GAAKU,EAAIlS,OAEFiR,EAAIA,EAAEG,MAAM,CACjB,IAAIpQ,EAAMiQ,EAAEvG,KACR8S,EAAKhM,EAAIxQ,EAAIhB,OAASgB,EAAIhB,OAASwR,EAIvC,GAHIgM,IAAOxc,EAAIhB,OAAQkS,GAAOlR,EAASkR,GAAOlR,EAAIX,MAAM,EAAGmR,GAGjD,KAFVA,GAAKgM,GAEQ,CACPA,IAAOxc,EAAIhB,UACXud,EACEtM,EAAEG,KAAMlS,KAAKgS,KAAOD,EAAEG,KAAUlS,KAAKgS,KAAOhS,KAAK0d,KAAO,OAE5D1d,KAAKgS,KAAOD,EACZA,EAAEvG,KAAO1J,EAAIX,MAAMmd,IAGrB,QAGAD,EAIJ,OADAre,KAAKc,QAAUud,EACRrL,IAGR,CACDnQ,IAAK,aACLxB,MAAO,SAAoBiR,GACzB,IAAIU,EAAMvH,EAAOuS,YAAY1L,GACzBP,EAAI/R,KAAKgS,KACTqM,EAAI,EAIR,IAHAtM,EAAEvG,KAAKyS,KAAKjL,GACZV,GAAKP,EAAEvG,KAAK1K,OAELiR,EAAIA,EAAEG,MAAM,CACjB,IAAIqM,EAAMxM,EAAEvG,KACR8S,EAAKhM,EAAIiM,EAAIzd,OAASyd,EAAIzd,OAASwR,EAIvC,GAHAiM,EAAIN,KAAKjL,EAAKA,EAAIlS,OAASwR,EAAG,EAAGgM,GAGvB,KAFVhM,GAAKgM,GAEQ,CACPA,IAAOC,EAAIzd,UACXud,EACEtM,EAAEG,KAAMlS,KAAKgS,KAAOD,EAAEG,KAAUlS,KAAKgS,KAAOhS,KAAK0d,KAAO,OAE5D1d,KAAKgS,KAAOD,EACZA,EAAEvG,KAAO+S,EAAIpd,MAAMmd,IAGrB,QAGAD,EAIJ,OADAre,KAAKc,QAAUud,EACRrL,IAGR,CACDnQ,IAAKya,EACLjc,MAAO,SAAe6Y,EAAG7W,GACvB,OAAOga,EAAQrd,KAnMrB,SAAuBkd,GAAU,IAAK,IAAIlc,EAAI,EAAGA,EAAIsL,UAAUxL,OAAQE,IAAK,CAAE,IAAIwd,EAAyB,MAAhBlS,UAAUtL,GAAasL,UAAUtL,GAAK,GAAQA,EAAI,EAAKwb,EAAQrc,OAAOqe,IAAS,GAAMC,SAAQ,SAAU5b,GAAOka,EAAgBG,EAAQra,EAAK2b,EAAO3b,OAAsB1C,OAAOue,0BAA6Bve,OAAOwe,iBAAiBzB,EAAQ/c,OAAOue,0BAA0BF,IAAmBhC,EAAQrc,OAAOqe,IAASC,SAAQ,SAAU5b,GAAO1C,OAAO+D,eAAegZ,EAAQra,EAAK1C,OAAO2c,yBAAyB0B,EAAQ3b,OAAe,OAAOqa,EAmMlf0B,CAAc,GAAIvb,EAAS,CAE9Cwb,MAAO,EAEPC,eAAe,UA/LuD7B,EAAkBO,EAAYtd,UAAWyd,GAAiBC,GAAaX,EAAkBO,EAAaI,GAoM3KvP,EApLT,I,kCC5BA,YAEA,IAAI0Q,EAEJ,SAAShC,EAAgBna,EAAKC,EAAKxB,GAAiK,OAApJwB,KAAOD,EAAOzC,OAAO+D,eAAetB,EAAKC,EAAK,CAAExB,MAAOA,EAAO8C,YAAY,EAAM6Y,cAAc,EAAMxZ,UAAU,IAAkBZ,EAAIC,GAAOxB,EAAgBuB,EAE3M,IAAIiJ,EAAW5I,EAAQ,KAEnB+b,EAAetJ,OAAO,eACtBuJ,EAAcvJ,OAAO,cACrBwJ,EAASxJ,OAAO,SAChByJ,EAASzJ,OAAO,SAChB0J,EAAe1J,OAAO,eACtB2J,EAAiB3J,OAAO,iBACxB4J,EAAU5J,OAAO,UAErB,SAAS6J,EAAiBle,EAAO0a,GAC/B,MAAO,CACL1a,MAAOA,EACP0a,KAAMA,GAIV,SAASyD,EAAeC,GACtB,IAAIrD,EAAUqD,EAAKT,GAEnB,GAAgB,OAAZ5C,EAAkB,CACpB,IAAI5Q,EAAOiU,EAAKH,GAASlP,OAIZ,OAAT5E,IACFiU,EAAKL,GAAgB,KACrBK,EAAKT,GAAgB,KACrBS,EAAKR,GAAe,KACpB7C,EAAQmD,EAAiB/T,GAAM,MAKrC,SAASkU,EAAWD,GAGlB5b,EAAQC,SAAS0b,EAAgBC,GAgBnC,IAAIE,EAAyBxf,OAAOgR,gBAAe,eAC/CyO,EAAuCzf,OAAO0f,gBA4D/C9C,EA5D+DgC,EAAwB,CACxF,aACE,OAAO/e,KAAKsf,IAGdpN,KAAM,WACJ,IAAIsD,EAAQxV,KAIR+K,EAAQ/K,KAAKkf,GAEjB,GAAc,OAAVnU,EACF,OAAOoR,QAAQ2D,OAAO/U,GAGxB,GAAI/K,KAAKmf,GACP,OAAOhD,QAAQC,QAAQmD,OAAiBvd,GAAW,IAGrD,GAAIhC,KAAKsf,GAAS9a,UAKhB,OAAO,IAAI2X,SAAQ,SAAUC,EAAS0D,GACpCjc,EAAQC,UAAS,WACX0R,EAAM0J,GACRY,EAAOtK,EAAM0J,IAEb9C,EAAQmD,OAAiBvd,GAAW,UAU5C,IACIia,EADA8D,EAAc/f,KAAKof,GAGvB,GAAIW,EACF9D,EAAU,IAAIE,QA1DpB,SAAqB4D,EAAaN,GAChC,OAAO,SAAUrD,EAAS0D,GACxBC,EAAY1D,MAAK,WACXoD,EAAKN,GACP/C,EAAQmD,OAAiBvd,GAAW,IAItCyd,EAAKJ,GAAgBjD,EAAS0D,KAC7BA,IAiDqBE,CAAYD,EAAa/f,WAC1C,CAGL,IAAIwL,EAAOxL,KAAKsf,GAASlP,OAEzB,GAAa,OAAT5E,EACF,OAAO2Q,QAAQC,QAAQmD,EAAiB/T,GAAM,IAGhDyQ,EAAU,IAAIE,QAAQnc,KAAKqf,IAI7B,OADArf,KAAKof,GAAgBnD,EACdA,IAE+BvG,OAAOC,eAAe,WAC9D,OAAO3V,QACL+c,EAAgBgC,EAAuB,UAAU,WACnD,IAAIkB,EAASjgB,KAKb,OAAO,IAAImc,SAAQ,SAAUC,EAAS0D,GACpCG,EAAOX,GAAShP,QAAQ,MAAM,SAAUzF,GAClCA,EACFiV,EAAOjV,GAITuR,EAAQmD,OAAiBvd,GAAW,aAGtC+c,GAAwBY,GAoE5Bnd,EAAOC,QAlEiC,SAA2CyJ,GACjF,IAAIgU,EAEAC,EAAWhgB,OAAOC,OAAOwf,GAA4D7C,EAArBmD,EAAiB,GAAoCZ,EAAS,CAChIje,MAAO6K,EACP1I,UAAU,IACRuZ,EAAgBmD,EAAgBlB,EAAc,CAChD3d,MAAO,KACPmC,UAAU,IACRuZ,EAAgBmD,EAAgBjB,EAAa,CAC/C5d,MAAO,KACPmC,UAAU,IACRuZ,EAAgBmD,EAAgBhB,EAAQ,CAC1C7d,MAAO,KACPmC,UAAU,IACRuZ,EAAgBmD,EAAgBf,EAAQ,CAC1C9d,MAAO6K,EAAO3H,eAAeuI,WAC7BtJ,UAAU,IACRuZ,EAAgBmD,EAAgBb,EAAgB,CAClDhe,MAAO,SAAe+a,EAAS0D,GAC7B,IAAItU,EAAO2U,EAASb,GAASlP,OAEzB5E,GACF2U,EAASf,GAAgB,KACzBe,EAASnB,GAAgB,KACzBmB,EAASlB,GAAe,KACxB7C,EAAQmD,EAAiB/T,GAAM,MAE/B2U,EAASnB,GAAgB5C,EACzB+D,EAASlB,GAAea,IAG5Btc,UAAU,IACR0c,IA8BJ,OA7BAC,EAASf,GAAgB,KACzBvT,EAASK,GAAQ,SAAUrB,GACzB,GAAIA,GAAoB,+BAAbA,EAAIzL,KAAuC,CACpD,IAAI0gB,EAASK,EAASlB,GAWtB,OARe,OAAXa,IACFK,EAASf,GAAgB,KACzBe,EAASnB,GAAgB,KACzBmB,EAASlB,GAAe,KACxBa,EAAOjV,SAGTsV,EAASjB,GAAUrU,GAIrB,IAAIuR,EAAU+D,EAASnB,GAEP,OAAZ5C,IACF+D,EAASf,GAAgB,KACzBe,EAASnB,GAAgB,KACzBmB,EAASlB,GAAe,KACxB7C,EAAQmD,OAAiBvd,GAAW,KAGtCme,EAAShB,IAAU,KAErBjT,EAAOX,GAAG,WAAYmU,EAAWjK,KAAK,KAAM0K,IACrCA,K,oCC3MT3d,EAAOC,QAAU,WACf,MAAM,IAAIlD,MAAM,mD,iCCwBlBiD,EAAOC,QAAUmJ,EAEjB,IAAID,EAAY1I,EAAQ,KAIxB,SAAS2I,EAAYvI,GACnB,KAAMrD,gBAAgB4L,GAAc,OAAO,IAAIA,EAAYvI,GAC3DsI,EAAU5L,KAAKC,KAAMqD,GAJvBJ,EAAQ,EAARA,CAAoB2I,EAAaD,GAOjCC,EAAY1L,UAAU0b,WAAa,SAAUnL,EAAON,EAAUyB,GAC5DA,EAAG,KAAMnB,K,iCCjCX,IAAIxE,EAWJ,IAAIuC,EAAiBvL,EAAQ,KAAmB/D,MAC5CkhB,EAAmB5R,EAAe4R,iBAClCzI,EAAuBnJ,EAAemJ,qBAE1C,SAAS3L,EAAKnB,GAEZ,GAAIA,EAAK,MAAMA,EAOjB,SAASwV,EAAUnU,EAAQoD,EAAS6I,EAASnQ,GAC3CA,EAvBF,SAAcA,GACZ,IAAIoE,GAAS,EACb,OAAO,WACDA,IACJA,GAAS,EACTpE,EAASyE,WAAM,EAAQH,aAkBd7I,CAAKuE,GAChB,IAAIsY,GAAS,EACbpU,EAAOX,GAAG,SAAS,WACjB+U,GAAS,UAECte,IAARiK,IAAmBA,EAAMhJ,EAAQ,MACrCgJ,EAAIC,EAAQ,CACV3I,SAAU+L,EACV9L,SAAU2U,IACT,SAAUtN,GACX,GAAIA,EAAK,OAAO7C,EAAS6C,GACzByV,GAAS,EACTtY,OAEF,IAAIxD,GAAY,EAChB,OAAO,SAAUqG,GACf,IAAIyV,IACA9b,EAGJ,OAFAA,GAAY,EAvBhB,SAAmB0H,GACjB,OAAOA,EAAOiB,WAAqC,oBAAjBjB,EAAOkB,MAwBnCC,CAAUnB,GAAgBA,EAAOkB,QACP,oBAAnBlB,EAAOoE,QAA+BpE,EAAOoE,eACxDtI,EAAS6C,GAAO,IAAI8M,EAAqB,UAI7C,SAAS5X,EAAK8U,GACZA,IAGF,SAASlB,EAAKvF,EAAMmS,GAClB,OAAOnS,EAAKuF,KAAK4M,GAGnB,SAASC,EAAYC,GACnB,OAAKA,EAAQ3f,OAC8B,oBAAhC2f,EAAQA,EAAQ3f,OAAS,GAA0BkL,EACvDyU,EAAQC,MAFa1U,EAgC9BxJ,EAAOC,QA3BP,WACE,IAAK,IAAI4J,EAAOC,UAAUxL,OAAQ2f,EAAU,IAAI9f,MAAM0L,GAAOG,EAAO,EAAGA,EAAOH,EAAMG,IAClFiU,EAAQjU,GAAQF,UAAUE,GAG5B,IAOIzB,EAPA/C,EAAWwY,EAAYC,GAG3B,GAFI9f,MAAMC,QAAQ6f,EAAQ,MAAKA,EAAUA,EAAQ,IAE7CA,EAAQ3f,OAAS,EACnB,MAAM,IAAIsf,EAAiB,WAI7B,IAAIO,EAAWF,EAAQ1f,KAAI,SAAUmL,EAAQlL,GAC3C,IAAIsO,EAAUtO,EAAIyf,EAAQ3f,OAAS,EAEnC,OAAOuf,EAAUnU,EAAQoD,EADXtO,EAAI,GACyB,SAAU6J,GAC9CE,IAAOA,EAAQF,GAChBA,GAAK8V,EAASlC,QAAQ1e,GACtBuP,IACJqR,EAASlC,QAAQ1e,GACjBiI,EAAS+C,UAGb,OAAO0V,EAAQG,OAAOjN,K,4rCCxFjB,SAASkN,EAAYC,GAC1B,QAASA,GAA0B,cAAlBA,EAAKC,SAIjB,SAASC,EAAYF,GAC1B,QAASA,GAA0B,cAAlBA,EAAKC,SAIjB,SAASE,EAAUH,GACxB,QAASA,GAA0B,YAAlBA,EAAKC,SAIjB,SAASG,EAAWJ,GACzB,QAASA,GAA0B,aAAlBA,EAAKC,SAIjB,SAASI,EAAeL,GAC7B,QAASA,GAA0B,iBAAlBA,EAAKC,SAIjB,SAASK,EAAeC,GAC7B,OAAOF,EAAeE,EAAKC,OAItB,SAAS5Y,EAAO6Y,EAAKC,GAC1B,OAAOC,EAAS,CAAE,GAAIF,GAAOC,EAAtBC,CAA+B,IAIjC,SAASA,EAASC,EAAiBF,GAExC,IAAMC,EAAWthB,OAAOC,OAAO,MAC/B,IAAK,IAAMsI,KAAUgZ,EACnBC,EAAcjZ,EAAQgZ,EAAgBhZ,IAMxC,SAASiZ,EAAcjZ,EAAQ6Y,GAE7B,GAAmB,kBAARA,EAAkB,CAE3B,IAAMK,EAAQzhB,OAAOC,OAAO,MAC5BqhB,EAAS/Y,GAAU,SAAAmZ,GACjB,OAAOD,EAAMC,KAAWD,EAAMC,GAASL,EAAQM,UAAUP,EAAMM,UAG9D,KAAMnZ,KAAU+Y,GACnB,MAAM,IAAIliB,MAAJ,0BAA6BmJ,IAErC,OAAO+Y,EAAS/Y,GAElB,OAlBA8Y,EAAUA,GAAWO,EAkBdJ,E,ICxDLK,EAHI7c,EAAaY,IAAbZ,IAAKN,EAAQkB,IAARlB,IAITod,EAAoB,EAElBC,EAAiB,uBACjBC,EAAS,0HAGTC,EAAc,CAClBN,UAkSF,SAAmBP,GACjB,OAAO,IAAIc,EAAUd,IAlSrBe,UAsSF,SAAmB/hB,GACjB,OAAO,IAAIgiB,EAAUhiB,GAAQ,MAAJ,OAAU0hB,OAtSnCO,SAwUF,SAAkBjiB,GAChB,OAAO,IAAIkiB,EAASliB,IAxUpBmiB,QAySF,SAAiBrhB,EAAOshB,GAEtB,GAAkC,kBAAvBA,EACT,OAAO,IAAIC,EAAJ,WAAgBvhB,EAAhB,aAA0BshB,EAAmB5H,gBAGtD,IAAI8H,EAAWF,EAAqBA,EAAmBthB,MAAQ,GAC9C,KAAbwhB,IAEmB,mBAAVxhB,EACTwhB,EAAWhe,EAAIE,QAES,kBAAV1D,IACV2I,OAAO4M,SAASvV,GAClBwhB,EAAW7Y,OAAO8Y,UAAUzhB,GAASwD,EAAII,QAAUJ,EAAIG,QAEvD6d,EAAWhe,EAAIG,OACVgF,OAAO+Y,MAAM1hB,KAChBA,EAAQA,EAAQ,EAAI,MAAQ,WAMpC,MAAqB,KAAbwhB,GAAmBA,IAAahe,EAAIK,OAC1C,IAAI0d,EAAJ,WAAgBvhB,EAAhB,MACA,IAAIuhB,EAAJ,WAAgBvhB,EAAhB,cAA2BwhB,KAlU7BG,aA2UF,WACE,OAAOhB,GA3UPX,OACA4B,OAAQ5B,GAEKe,IAGFc,EAAb,WACE,WAAYC,GAAI,oBACdnjB,KAAKmjB,GAAKA,EAFd,mDAWSC,GAGL,OAAIA,aAAiBF,EACZljB,KAAKmjB,KAAOC,EAAMD,KAElBC,GAASpjB,KAAK+gB,WAAaqC,EAAMrC,UACxB/gB,KAAKqB,QAAa+hB,EAAM/hB,QAlB9C,+BAuBI,MAAO,CACL0f,SAAU/gB,KAAK+gB,SACf1f,MAAUrB,KAAKqB,SAzBrB,4BAOI,OAAOrB,KAAKmjB,OAPhB,KAgCad,EAAb,uKAGI,MAAO,gBAHX,GAA+Ba,GAQlBN,EAAb,qKAqCSQ,GAGL,OAAIA,aAAiBR,EACZ5iB,KAAKmjB,KAAOC,EAAMD,KAElBC,KAAWA,EAAMP,UACR7iB,KAAK+gB,WAAaqC,EAAMrC,UACxB/gB,KAAKqB,QAAa+hB,EAAM/hB,OACxBrB,KAAKqjB,WAAaD,EAAMC,UACxBrjB,KAAK6iB,SAASxhB,QAAU+hB,EAAMP,SAASxhB,QA/C7D,+BAmDI,MAAO,CACL0f,SAAU/gB,KAAK+gB,SACf1f,MAAUrB,KAAKqB,MACfgiB,SAAUrjB,KAAKqjB,SACfR,SAAU,CAAE9B,SAAU,YAAa1f,MAAOrB,KAAKsjB,mBAvDrD,+BAGI,MAAO,YAHX,4BAQI,OAAOtjB,KAAKmjB,GAAGlhB,UAAU,EAAGjC,KAAKmjB,GAAGI,YAAY,QARpD,+BAcI,IAAMJ,EAAKnjB,KAAKmjB,GACZK,EAAQL,EAAGI,YAAY,KAAO,EAElC,OAAOC,EAAQL,EAAGriB,QAA0B,MAAhBqiB,EAAGK,KAAmBL,EAAGvhB,OAAO4hB,GAAOzI,cAAgB,KAjBvF,+BAsBI,OAAO,IAAIsH,EAAUriB,KAAKsjB,kBAtB9B,qCA4BI,IAAMH,EAAKnjB,KAAKmjB,GAAIM,EAAQN,EAAGI,YAAY,KAAO,EAC5CG,EAAOD,EAAQN,EAAGriB,OAASqiB,EAAGM,GAAS,GAE7C,MAAgB,MAATC,EAAeP,EAAGvhB,OAAO6hB,EAAQ,GAEvB,MAATC,EAAe7e,EAAIK,OAASC,EAAII,eAjC5C,GAA6B2d,GA6DhBX,EAAb,kDACE,WAAYhiB,GAAM,mDACLA,IAFf,qDAOI,MAAO,cAPX,4BAYI,OAAOP,KAAKmjB,GAAGvhB,OAAO,OAZ1B,GAA+BshB,GAgBlBT,EAAb,kDACE,WAAYliB,GAAM,kDACNA,IAFd,qDAOI,MAAO,aAPX,4BAYI,OAAOP,KAAKmjB,GAAGvhB,OAAO,OAZ1B,GAA8BshB,GAiBjBS,EAAb,kDACE,aAAc,MAEZ,OAFY,oBACZ,cAAM,IACN,cAAO3B,GAAgB,gBAH3B,mDAYSoB,GAIL,OAAQpjB,OAASojB,KAAaA,GAAUpjB,KAAK+gB,WAAaqC,EAAMrC,WAhBpE,+BAQI,MAAO,mBARX,GAAkCmC,GAyB3B,SAASU,EAAWT,EAAI3B,GAI7B,GAHAA,EAAUA,GAAWY,GAGhBe,EACH,OAAO3B,EAAQwB,eAGjB,OAAQG,EAAG,IACX,IAAK,IACH,OAAO3B,EAAQgB,SAASW,EAAGvhB,OAAO,IACpC,IAAK,IACH,OAAO4f,EAAQc,UAAUa,EAAGvhB,OAAO,IACrC,IAAK,IAEH,GAAI4f,IAAYY,EACd,OAAO,IAAIQ,EAAQO,GAErB,GAA0B,MAAtBA,EAAGA,EAAGriB,OAAS,GACjB,OAAO0gB,EAAQkB,QAAQS,EAAGvhB,OAAO,EAAGuhB,EAAGriB,OAAS,IAElD,IAAM+iB,EAASV,EAAGI,YAAY,IAAKJ,EAAGriB,OAAS,GAC/C,OAAO0gB,EAAQkB,QAAQS,EAAGvhB,OAAO,EAAGiiB,EAAS,GAClB,MAAnBV,EAAGU,EAAS,GAAaV,EAAGvhB,OAAOiiB,EAAS,GACnBrC,EAAQM,UAAUqB,EAAGvhB,OAAOiiB,EAAS,KACxE,IAAK,IACH,IAAMC,EAAa3B,EAAO5Z,KAAK4a,GAC/B,OAAO3B,EAAQH,KACbuC,EAAWG,EAAeD,EAAW,IAAKtC,GAC1CoC,EAAWG,EAAeD,EAAW,IAAKtC,GAC1CoC,EAAWG,EAAeD,EAAW,IAAKtC,GAC1CsC,EAAW,IAAMF,EAAWG,EAAeD,EAAW,IAAKtC,IAE/D,QACE,OAAOA,EAAQM,UAAUqB,IAKtB,SAASa,EAASlD,GACvB,GAAoB,kBAATA,EACT,OAAOA,EACT,GAAIA,aAAgBoC,GAA0B,SAAlBpC,EAAKC,SAC/B,OAAOD,EAAKqC,GACd,IAAKrC,EACH,OAAOkB,EAAamB,GAGtB,OAAQrC,EAAKC,UACb,IAAK,YAAgB,OAAOD,EAAKzf,MACjC,IAAK,YAAgB,kBAAYyf,EAAKzf,OACtC,IAAK,WAAgB,iBAAWyf,EAAKzf,OACrC,IAAK,eAAgB,MAAO,GAC5B,IAAK,UAAgB,iBAAWyf,EAAKzf,MAAhB,YACnByf,EAAKuC,SAAL,WAAoBvC,EAAKuC,UACtBvC,EAAK+B,UAAY/B,EAAK+B,SAASxhB,QAAUwD,EAAIK,OAA7C,YAA2D4b,EAAK+B,SAASxhB,OAAU,IACxF,IAAK,OAGH,kBACI4iB,EAAaD,EAASlD,EAAKoD,UAD/B,YAGID,EAAaD,EAASlD,EAAKqD,YAH/B,YAKIF,EAAaD,EAASlD,EAAKzG,UAL/B,OAOK8G,EAAeL,EAAKQ,OAAU,GAA/B,WAAwC0C,EAASlD,EAAKQ,QAP1D,MASF,QAAS,MAAM,IAAI/hB,MAAJ,+BAAkCuhB,EAAKC,YAxExDiB,EAAe,IAAI2B,EA8EZ,IAAMS,EAAb,kDACE,WAAYF,EAASC,EAAW9J,EAAQiH,GAAO,kCAC7C,cAAM,KACD4C,QAAYA,EACjB,EAAKC,UAAYA,EACjB,EAAK9J,OAAYA,EACjB,EAAKiH,MAAYA,GAASU,EALmB,EADjD,qDAgBI,MAAO,CACLjB,SAAW/gB,KAAK+gB,SAChBmD,QAAWlkB,KAAKkkB,QAAQG,SACxBF,UAAWnkB,KAAKmkB,UAAUE,SAC1BhK,OAAWra,KAAKqa,OAAOgK,SACvB/C,MAAWthB,KAAKshB,MAAM+C,YArB5B,6BA0BSjB,GACL,QAASA,GAASpjB,KAAKkkB,QAAQI,OAAOlB,EAAMc,UAC1BlkB,KAAKmkB,UAAUG,OAAOlB,EAAMe,YAC5BnkB,KAAKqa,OAAOiK,OAAOlB,EAAM/I,SACzBra,KAAKshB,MAAMgD,OAAOlB,EAAM9B,SA9B9C,+BAWI,MAAO,WAXX,GAA0B4B,GAoCnB,SAASe,EAAad,GAC3B,OAAOA,EAAGthB,QAAQqgB,GAAgB,SAAChI,EAAGqK,GAAJ,iBAAmBA,EAAO1iB,QAAQ,KAAM,UAIrE,SAASkiB,EAAeZ,GAC7B,OAAOA,EAAGthB,QAAQqgB,GAAgB,SAAChI,EAAGqK,GAAJ,iBAAmBA,EAAO1iB,QAAQ,MAAO,SAsD7E,SAASwf,EAAK6C,EAASC,EAAW9J,EAAQiH,GACxC,OAAO,IAAI8C,EAAKF,EAASC,EAAW9J,EAAQiH,GChW9C,IAAIkD,EAAkB,EAGDC,E,WACnB,WAAYphB,GAAS,oBACnBrD,KAAK0kB,cAAgB,GACrB1kB,KAAK2kB,OAAS,KAGdthB,EAAUA,GAAW,GACrBrD,KAAK4kB,SAASvhB,EAAQwhB,SACtBxhB,EAAQme,SAAWsD,EAAgB9kB,KAAMqD,EAAQme,SAGjD,IAAMuD,EAAoC,kBAAnB1hB,EAAQ0hB,OAClB1hB,EAAQ0hB,OAAOlc,MAAM,QAAQ,GAAGkS,cAAgB,GACzDiK,EAAW,SAASrc,KAAKoc,GAASE,EAAS,OAAOtc,KAAKoc,GACvDG,EAAa,SAASvc,KAAKoc,GAASI,EAAW,OAAOxc,KAAKoc,GAC3DK,EAAOplB,KAAK0H,QAAU,KAAKiB,KAAKoc,GAChCM,EAAaH,GAAcC,GACzBnlB,KAAKslB,uBAAyBN,GAAYI,MAC9CplB,KAAKulB,2BAA6BvlB,KAAKwlB,gBAEzCxlB,KAAKylB,iBAAmBT,GAAYC,GAAUC,GAAcE,GAE5DplB,KAAK0lB,iBAA8B,KAAXX,GAAiB,WAAWpc,KAAKoc,GAErDM,IACFrlB,KAAK2lB,oBAAsB,SAAApE,GAAS,OAAO,OAC7CvhB,KAAK4lB,iBAAsD,kBAA5BviB,EAAQmhB,gBAA+B,GAC5CnhB,EAAQmhB,gBAAgB3iB,QAAQ,UAAW,MACrE7B,KAAK6lB,OAASxiB,EAAQyiB,OAAS,IAAIhf,IAAQ,CAAEW,SAAU4d,EAAYzd,GAAIwd,IAEvEplB,KAAK+lB,uBAAyB1iB,EAAQ2iB,oB,qDAa/BnB,GACP,GAAKA,EAIA,CAEH,IAAMoB,EAAcpB,EAAQxiB,QAAQ,KAChC4jB,GAAe,IACjBpB,EAAUA,EAAQjjB,OAAO,EAAGqkB,IAE9BjmB,KAAKkmB,MAAQrB,EACb7kB,KAAKmmB,UAActB,EAAQxiB,QAAQ,KAAO,EAAIwiB,EAC3BA,EAAQhjB,QAAQ,oBAAqB,IACxDgjB,EAAUA,EAAQhc,MAAM,8CACxB7I,KAAKomB,UAAcvB,EAAQ,GAC3B7kB,KAAKqmB,YAAcxB,EAAQ,QAd3B7kB,KAAKkmB,MAAQ,GACblmB,KAAKmmB,UAAY,K,mCAmBRhkB,EAAMmf,EAAO4C,EAASC,EAAW9J,GAC5C,IAAMiM,EAAStmB,KAAK0H,QACpB1H,KAAK0kB,cAAc5hB,KAAK,CACtBohB,QAASA,EAASC,UAAWA,EAAW9J,OAAQA,EAChDiH,MAAOA,EAAOnf,KAAMA,EACpBokB,UAASD,GAAStmB,KAAKwmB,kBACvBC,YAAaH,EAAStmB,KAAK0mB,UAAUxM,EAAI,GACzCyM,WAAYL,EAAStmB,KAAK4mB,YAAc,OAGtCN,IAEFtmB,KAAKwmB,mBAAoB,EAGzBxmB,KAAK0mB,UAAUxM,EAAKla,KAAK2kB,OAAL,UAAiB3kB,KAAK2kB,OAAOxB,GAAGvhB,OAAO,GAAvC,KAA+C,IAEnE5B,KAAK4mB,YAAczmB,OAAOC,OAAOJ,KAAK4mB,gB,wCAOxC,IAAM9b,EAAU9K,KAAK0kB,cAAchE,MAAO4F,EAAStmB,KAAK0H,QACxD1H,KAAK6mB,SAAa/b,EAAQoZ,QAC1BlkB,KAAK8mB,WAAahc,EAAQqZ,UAC1BnkB,KAAK+mB,QAAajc,EAAQuP,OAC1Bra,KAAK2kB,OAAa7Z,EAAQwW,MAEtBgF,IACFtmB,KAAKwmB,kBAAoB1b,EAAQyb,QACjCvmB,KAAK0mB,UAAUxM,EAAIpP,EAAQ2b,YAC3BzmB,KAAK4mB,YAAc9b,EAAQ6b,c,wCAKbtd,GAChB,OAAQA,EAAMlH,MAEd,IAAK,MACH,OAAoB,OAAhBnC,KAAK2kB,OACA3kB,KAAKgnB,OAAO,iBAAkB3d,WAChCrJ,KAAK0mB,UAAUxM,EACfla,KAAKinB,UAAU,KAAM,KAAMjnB,KAAK0mB,YAEzC,IAAK,SACH1mB,KAAKknB,cAAe,EACtB,IAAK,UACH,OAAOlnB,KAAKmnB,YAEd,IAAK,OACHnnB,KAAKknB,cAAe,EACtB,IAAK,QACH,OAAOlnB,KAAKonB,aAEd,IAAK,IACH,GAAIpnB,KAAKslB,qBAGP,OAFAtlB,KAAK2kB,OAAS,GACd3kB,KAAK6mB,SAAW,KACT7mB,KAAKqnB,aAEhB,IAAK,QACH,GAAIrnB,KAAKslB,qBACP,OAAOtlB,KAAKsnB,qBAEhB,QACE,OAAOtnB,KAAKqnB,aAAahe,M,kCAKjBA,EAAOke,GACjB,IAAIlmB,EACJ,OAAQgI,EAAMlH,MAEd,IAAK,MACL,IAAK,UACH,IAAMof,EAAMvhB,KAAKwnB,YAAYne,EAAMhI,OACnC,GAAY,OAARkgB,EACF,OAAOvhB,KAAKgnB,OAAO,cAAe3d,GACpChI,EAAQrB,KAAKynB,WAAWlG,GACxB,MAEF,IAAK,OACL,IAAK,WACH,IAAM7Y,EAAS1I,KAAK0mB,UAAUrd,EAAMX,QACpC,QAAe1G,IAAX0G,EACF,OAAO1I,KAAKgnB,OAAL,4BAAiC3d,EAAMX,OAAvC,MAAmDW,GAC5DhI,EAAQrB,KAAKynB,WAAW/e,EAASW,EAAMhI,OACvC,MAEF,IAAK,QACHA,EAAQrB,KAAK0nB,WAAW1nB,KAAK0mB,UAAUrd,EAAMX,QAAUW,EAAMhI,OAC7D,MAEF,IAAK,MACHA,EAAQrB,KAAKkH,UAAUmC,EAAMhI,MAAMO,OAAO,IAC1C,MAEF,QACE,OAAO5B,KAAKgnB,OAAL,kCAAuC3d,EAAMlH,MAAQkH,GAK9D,OAFKke,GAAcvnB,KAAK0H,SAAYrG,EAAM8hB,MAAMnjB,KAAK4mB,cACnDvlB,EAAQrB,KAAK4mB,YAAYvlB,EAAM8hB,KAC1B9hB,I,mCAIIgI,GAEX,OADArJ,KAAK8mB,WAAa,KACVzd,EAAMlH,MACd,IAAK,IAIH,OAFAnC,KAAK2nB,aAAa,QAAS3nB,KAAK2kB,OACd3kB,KAAK6mB,SAAW7mB,KAAK0nB,aAAc,KAAM,MACpD1nB,KAAK4nB,mBACd,IAAK,IAIH,OAFA5nB,KAAK2nB,aAAa,OAAQ3nB,KAAK2kB,OAAQ3kB,KAAK6nB,QAAS,KAAM,MAC3D7nB,KAAK6mB,SAAW,KACT7mB,KAAK8nB,cACd,IAAK,IAEH,OAAK9nB,KAAK0H,SAEV1H,KAAK2nB,aAAa,UAAW3nB,KAAK2kB,OAChB3kB,KAAK2kB,OAAS3kB,KAAK0nB,aAAc,KAAM,MAClD1nB,KAAKqnB,cAHHrnB,KAAKgnB,OAAO,mBAAoB3d,GAI3C,IAAK,IAEH,OAAOrJ,KAAK+nB,iBAAiB1e,GAC/B,IAAK,WACH,OAAKrJ,KAAK0H,SAEV1H,KAAK6mB,SAAW,KAChB7mB,KAAK8mB,WAAa9mB,KAAKgoB,WACvBhoB,KAAKioB,YAAcjoB,KAAK0nB,WACjB1nB,KAAKkoB,qBAJHloB,KAAKgnB,OAAO,wBAAyB3d,GAKhD,IAAK,UACH,OAAKrJ,KAAK0H,SAEV1H,KAAK6mB,SAAW,KAChB7mB,KAAK8mB,WAAa9mB,KAAKmoB,UACvBnoB,KAAKioB,YAAcjoB,KAAKkH,UACjBlH,KAAKkoB,qBAJHloB,KAAKgnB,OAAO,uBAAwB3d,GAK/C,IAAK,UACH,IAAKrJ,KAAK0H,QACR,OAAO1H,KAAKgnB,OAAO,qBAAsB3d,GAE3C,GAA4B,IAAxBA,EAAMX,OAAO5H,OAEf,OADAd,KAAKooB,cAAgB/e,EAAMhI,MACpBrB,KAAKqoB,wBAGZroB,KAAK6mB,SAAW7mB,KAAKsoB,SAASjf,EAAMhI,MAAOrB,KAAKynB,WAAWpe,EAAMX,SAEnE,MACF,IAAK,KACH,OAAK1I,KAAK0lB,kBAEV1lB,KAAK2nB,aAAa,KAAM3nB,KAAK2kB,OAAQ,KAAM,KAAM,MACjD3kB,KAAK2kB,OAAS,KACP3kB,KAAKqnB,cAHHrnB,KAAKgnB,OAAO,yBAA0B3d,GAIjD,QAEE,QAAkDrH,KAA7ChC,KAAK6mB,SAAW7mB,KAAKuoB,YAAYlf,IACpC,OAEF,GAAIrJ,KAAK0H,QACP,OAAO1H,KAAKwoB,eAAexoB,KAAKulB,4BAKpC,OAAOvlB,KAAKulB,6B,qCAIClc,GACb,IAAMlH,EAAOkH,EAAMlH,KACnB,OAAQA,GACR,IAAK,UACHnC,KAAKwmB,mBAAoB,EAC3B,IAAK,eACHxmB,KAAK8mB,WAAa9mB,KAAKyoB,cAAcpf,EAAMhI,OAC3C,MACF,IAAK,IACL,IAAK,IACL,IAAK,IAEH,OAAwB,OAApBrB,KAAK8mB,WACA9mB,KAAKgnB,OAAL,qBAA0B7kB,GAAQkH,IAC3CrJ,KAAK6mB,SAAW,KACA,MAAT1kB,EAAenC,KAAK0oB,mBAAmBrf,GAASrJ,KAAK+nB,iBAAiB1e,IAC/E,IAAK,IAEH,OAA2B,OAApBrJ,KAAK8mB,WAAsB9mB,KAAKwlB,eAChCxlB,KAAKgnB,OAAO,+BAAgC3d,GACrD,IAAK,QACH,IAAKrJ,KAAK0H,QACR,OAAO1H,KAAKgnB,OAAO,qCAAsC3d,GAC7D,QACE,QAAoDrH,KAA/ChC,KAAK8mB,WAAa9mB,KAAKuoB,YAAYlf,IACtC,OAGJ,OAAOrJ,KAAK2oB,c,kCAIFtf,GACV,OAAQA,EAAMlH,MACd,IAAK,UAEH,GAA4B,IAAxBkH,EAAMX,OAAO5H,OAEf,OADAd,KAAKooB,cAAgB/e,EAAMhI,MACpBrB,KAAK4oB,oBAIZ5oB,KAAK+mB,QAAU/mB,KAAKsoB,SAASjf,EAAMhI,MAAOrB,KAAKynB,WAAWpe,EAAMX,SAClE,MACF,IAAK,IAIH,OAFA1I,KAAK2nB,aAAa,QAAS3nB,KAAK2kB,OAAQ3kB,KAAK6mB,SAAU7mB,KAAK8mB,WAC1C9mB,KAAK6mB,SAAW7mB,KAAK0nB,cAChC1nB,KAAK4nB,mBACd,IAAK,IAIH,OAFA5nB,KAAK2nB,aAAa,OAAQ3nB,KAAK2kB,OAAQ3kB,KAAK6mB,SAAU7mB,KAAK8mB,WAAY9mB,KAAK6nB,SAC5E7nB,KAAK6mB,SAAW,KACT7mB,KAAK8nB,cACd,IAAK,IAEH,OAAK9nB,KAAK0H,SAEV1H,KAAK2nB,aAAa,UAAW3nB,KAAK2kB,OAAQ3kB,KAAK6mB,SAAU7mB,KAAK8mB,WAC5C9mB,KAAK2kB,OAAS3kB,KAAK0nB,cAC9B1nB,KAAKqnB,cAHHrnB,KAAKgnB,OAAO,mBAAoB3d,GAI3C,IAAK,KACH,OAAKrJ,KAAK0lB,kBAEV1lB,KAAK2nB,aAAa,KAAM3nB,KAAK2kB,OAAQ3kB,KAAK6mB,SAAU7mB,KAAK8mB,WAAY,MACrE9mB,KAAK2kB,OAAS,KACP3kB,KAAKqnB,cAHHrnB,KAAKgnB,OAAO,yBAA0B3d,GAIjD,QAEE,QAAiDrH,KAA5ChC,KAAK+mB,QAAU/mB,KAAKuoB,YAAYlf,IACnC,OAEF,GAAIrJ,KAAK0H,QACP,OAAO1H,KAAKwoB,eAAexoB,KAAK6oB,wBAEpC,OAAO7oB,KAAK6oB,yB,iDAIaxf,GACzB,MAAsB,MAAfA,EAAMlH,KAAenC,KAAK8oB,WAAWzf,GAASrJ,KAAKwlB,eAAenc,K,iCAIhEA,GACT,MAAmB,MAAfA,EAAMlH,KACDnC,KAAKgnB,OAAL,iCAAsC3d,EAAMlH,MAAQkH,IAE7DrJ,KAAK2kB,OAAS3kB,KAAK6mB,SAAU7mB,KAAK6mB,SAAW,KACtC7mB,KAAKqnB,gB,yCAIKhe,GACjB,MAAmB,MAAfA,EAAMlH,MACRnC,KAAK6mB,SAAW,KACT7mB,KAAK0oB,mBAAmBrf,KAG/BrJ,KAAK8mB,WAAa,KACX9mB,KAAKwlB,eAAenc,M,yCAKZA,GACjB,GAAmB,MAAfA,EAAMlH,KACR,OAAOnC,KAAK+oB,0BAA0B1f,GAGlB,OAAlBrJ,KAAK6mB,UACP7mB,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAK8mB,WAAY9mB,KAAK+mB,QAAS/mB,KAAK2kB,QAGhE,IAAMsE,EAA4B,OAApBjpB,KAAK8mB,WAGnB,OAFA9mB,KAAKkpB,kBAEgB,OAAjBlpB,KAAK+mB,QAEAkC,EAAQjpB,KAAKulB,2BAA6BvlB,KAAKmpB,yBAG/CnpB,KAAK6oB,yB,+CAISxf,GACvB,OAAQA,EAAMlH,MACd,IAAK,IACL,IAAK,IAGH,OADAnC,KAAK6mB,SAAW,KACT7mB,KAAK+nB,iBAAiB1e,GAC/B,QACE,OAAOrJ,KAAKwlB,eAAenc,M,oCAKjBA,GACZ,IAAIG,EAAO,KACP4f,EAAO,KACPlX,EAAOlS,KAAK8nB,cACVuB,EAAerpB,KAAK6mB,SACtByC,EAAQtpB,KAAK0kB,cACb6E,EAASD,EAAMA,EAAMxoB,OAAS,GAElC,OAAQuI,EAAMlH,MACd,IAAK,IAEHnC,KAAK2nB,aAAa,QAAS3nB,KAAK2kB,OACdyE,EAAOppB,KAAK0nB,aAAc1nB,KAAKwpB,UAC/BxpB,KAAK6mB,SAAWrd,EAAOxJ,KAAK0nB,cAC9CxV,EAAOlS,KAAK4nB,mBACZ,MACF,IAAK,IAEH5nB,KAAK2nB,aAAa,OAAQ3nB,KAAK2kB,OACbyE,EAAOppB,KAAK0nB,aAAc1nB,KAAKwpB,UAAWxpB,KAAK6nB,SACjE7nB,KAAK6mB,SAAW,KAChB,MACF,IAAK,IAQH,GANA7mB,KAAKkpB,kBAGgB,IAAjBI,EAAMxoB,QAAiD,SAAjCwoB,EAAMA,EAAMxoB,OAAS,GAAGqB,MAChDnC,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAK8mB,WAAY9mB,KAAK+mB,QAAS/mB,KAAK2kB,QAExC,OAApB3kB,KAAK8mB,YAIP,GAFA5U,EAAOlS,KAAKwlB,eAERxlB,KAAK6mB,WAAa7mB,KAAK6nB,QACzB,OAAO3V,OAMT,GAFAA,EAAOlS,KAAK6oB,uBAER7oB,KAAK+mB,UAAY/mB,KAAK6nB,QACxB,OAAO3V,EAGXkX,EAAOppB,KAAK6nB,QACZ,MACF,IAAK,UAEyB,IAAxBxe,EAAMX,OAAO5H,QACfd,KAAKooB,cAAgB/e,EAAMhI,MAC3B6Q,EAAOlS,KAAKypB,8BAIZjgB,EAAOxJ,KAAKsoB,SAASjf,EAAMhI,MAAOrB,KAAKynB,WAAWpe,EAAMX,SACxDwJ,EAAOlS,KAAK6oB,wBAEd,MACF,IAAK,IAEH,OAAK7oB,KAAK0H,SAEV1H,KAAK2nB,aAAa,UAAW3nB,KAAK2kB,OAAQ3kB,KAAK6mB,SAAU7mB,KAAK8mB,WAC5C9mB,KAAK2kB,OAAS3kB,KAAK0nB,cAC9B1nB,KAAKqnB,cAHHrnB,KAAKgnB,OAAO,mBAAoB3d,GAI3C,QACE,QAAyCrH,KAApCwH,EAAOxJ,KAAKuoB,YAAYlf,IAC3B,OAoBJ,GAhBa,OAAT+f,IACFppB,KAAK6mB,SAAWuC,EAAOppB,KAAK0nB,cAGT,OAAjB2B,EAEuB,OAArBE,EAAOpF,UACToF,EAAOrF,QAAUkF,EAEjBG,EAAOlP,OAAS+O,EAIlBppB,KAAKgpB,MAAMK,EAAcrpB,KAAK0pB,SAAUN,EAAMppB,KAAK2kB,QAGxC,OAATnb,EAAe,CAEjB,GAAIxJ,KAAK0H,UAA2B,QAAf2B,EAAMlH,MAAiC,aAAfkH,EAAMlH,MAKjD,OAHAnC,KAAK2nB,aAAa,OAAQ3nB,KAAK2kB,OAAQyE,EAAMppB,KAAKwpB,UAAWhgB,GAC7DxJ,KAAK6mB,SAAWrd,EAAMxJ,KAAK8mB,WAAa,KAEjC9mB,KAAKwoB,eAAexoB,KAAK8nB,eAGlC9nB,KAAKgpB,MAAMI,EAAMppB,KAAKwpB,UAAWhgB,EAAMxJ,KAAK2kB,QAE9C,OAAOzS,I,0CAIW7I,GAClB,OAAOrJ,KAAK2pB,uBAAuBtgB,GAAO,K,kDAKhBA,GAC1B,OAAOrJ,KAAK2pB,uBAAuBtgB,GAAO,K,uCAI3BA,GAEf,IAAIqZ,EAAU1iB,KAAKsoB,SAAStoB,KAAKooB,eAEjC,OAAQ/e,EAAMlH,MAEd,IAAK,OACL,IAAK,UACH,IAAM0gB,EAAW7iB,KAAKuoB,YAAYlf,GAClC,QAAiBrH,IAAb6gB,EAAwB,OAC5BH,EAAU1iB,KAAKsoB,SAAStoB,KAAKooB,cAAevF,GAC5CxZ,EAAQ,KACR,MAEF,IAAK,WACHqZ,EAAU1iB,KAAKsoB,SAAStoB,KAAKooB,cAAe/e,EAAMhI,OAClDgI,EAAQ,KAIV,MAAO,CAAEA,QAAOqZ,a,8CAIMrZ,GAEtB,OADArJ,KAAK6mB,SAAW7mB,KAAK4pB,iBAAiBvgB,GAAOqZ,QACtC1iB,KAAKulB,6B,6CAISlc,EAAOwgB,GAC5B,IAAMC,EAAY9pB,KAAK4pB,iBAAiBvgB,GACxC,GAAKygB,EASL,OAPA9pB,KAAK+mB,QAAU+C,EAAUpH,QAIrBmH,GACF7pB,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAKwpB,UAAWxpB,KAAK+mB,QAAS/mB,KAAK2kB,QAEvC,OAApBmF,EAAUzgB,MACLrJ,KAAK6oB,wBAGZ7oB,KAAK+pB,cAAgB/pB,KAAK6oB,uBACnB7oB,KAAK+pB,cAAcD,EAAUzgB,U,uCAKvBA,GACf,MAAmB,MAAfA,EAAMlH,KACDnC,KAAK+nB,iBAAiB1e,IAGT,OAAlBrJ,KAAK6mB,UACP7mB,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAK8mB,WAAY9mB,KAAK+mB,QAAS/mB,KAAK2kB,QAGhE3kB,KAAKkpB,kBAGmB,OAAjBlpB,KAAK+mB,QAAmB/mB,KAAKwlB,eAAiBxlB,KAAK6oB,0B,uCAI3Cxf,GACf,IAAI6I,EAAMoP,EAAQthB,KAAK2kB,OACjBT,EAAUlkB,KAAK6mB,SAAUmD,EAAmBhqB,KAAKwmB,kBACvD,OAAQnd,EAAMlH,MAEd,IAAK,IACH,GAAoB,OAAhBnC,KAAK2kB,OACP,OAAO3kB,KAAKgnB,OAAO,2BAA4B3d,GACjD,GAAIrJ,KAAK0H,QACP,OAAO1H,KAAKiqB,iBAAiB5gB,GAC/BrJ,KAAK2kB,OAAS,KAEhB,IAAK,IACH3kB,KAAK6mB,SAAW,KAChB3U,EAAOlS,KAAK0kB,cAAc5jB,OAASd,KAAKqnB,aAAernB,KAAKkqB,kBACxDF,IAAkBhqB,KAAKwmB,mBAAoB,GAC/C,MAEF,IAAK,IACHtU,EAAOlS,KAAKwlB,eACZ,MAEF,IAAK,IACHtT,EAAOlS,KAAK2oB,YACZ,MACF,QAEE,GAAI3oB,KAAKylB,gBAAkC,OAAhBzlB,KAAK2kB,aAAyD3iB,KAArCsf,EAAQthB,KAAKuoB,YAAYlf,IAAuB,CAClG6I,EAAOlS,KAAKmqB,qBACZ,MAEF,OAAOnqB,KAAKgnB,OAAL,0CAA+ChnB,KAAK+mB,QAAQ5D,GAA5D,KAAmE9Z,GAG5E,GAAgB,OAAZ6a,EAAkB,CACpB,IAAMC,EAAYnkB,KAAK8mB,WAAYzM,EAASra,KAAK+mB,QAC5CiD,EAGHhqB,KAAKgpB,MAAM3O,EAAS8J,EAAWD,EAAS5C,GAFxCthB,KAAKgpB,MAAM9E,EAASC,EAAW9J,EAASiH,GAI5C,OAAOpP,I,gDAIiB7I,GACxB,IAAI6I,EACJ,OAAQ7I,EAAMlH,MAEd,IAAK,IACH+P,EAAOlS,KAAKwlB,eACZ,MAEF,IAAK,IACHtT,EAAOlS,KAAK2oB,YACZ,MACF,QACE,OAAO3oB,KAAKgnB,OAAL,0CAA+ChnB,KAAK+mB,QAAQ5D,GAA5D,KAAmE9Z,GAI5E,OADArJ,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAK8mB,WAAY9mB,KAAK+mB,QAAS/mB,KAAK2kB,QACvDzS,I,2CAIY7I,GACnB,MAAmB,MAAfA,EAAMlH,KACDnC,KAAKgnB,OAAO,8BAA+B3d,GAC7CrJ,KAAKkqB,oB,kCAIF7gB,GACV,MAAmB,WAAfA,EAAMlH,KACDnC,KAAKgnB,OAAO,oCAAqC3d,IAC1DrJ,KAAKgH,QAAUqC,EAAMhI,MACdrB,KAAKoqB,kB,qCAIC/gB,GACb,GAAmB,QAAfA,EAAMlH,KACR,OAAOnC,KAAKgnB,OAAL,yCAA8ChnB,KAAKgH,QAAnD,MAAgEqC,GACzE,IAAMghB,EAAarqB,KAAKuoB,YAAYlf,GAGpC,OAFArJ,KAAK0mB,UAAU1mB,KAAKgH,SAAWqjB,EAAWhpB,MAC1CrB,KAAKsqB,gBAAgBtqB,KAAKgH,QAASqjB,GAC5BrqB,KAAKuqB,8B,mCAIDlhB,GACX,IAAMkY,EAAqB,QAAflY,EAAMlH,MAAkBnC,KAAKwnB,YAAYne,EAAMhI,OAC3D,OAAKkgB,GAELvhB,KAAK4kB,SAASrD,GACPvhB,KAAKuqB,6BAFHvqB,KAAKgnB,OAAO,gDAAiD3d,K,2CAMnDA,GACnB,OAAQA,EAAMlH,MACd,IAAK,MACL,IAAK,QACL,IAAK,WACH,OAAOnC,KAAKqnB,aAAahe,GAAQrJ,KAAK8oB,WACxC,IAAK,IACH,OAAO9oB,KAAKwqB,0BACd,QACE,OAAOxqB,KAAKgnB,OAAO,sBAAuB3d,M,gDAKpBA,GACxB,MAAmB,MAAfA,EAAMlH,KACDnC,KAAKgnB,OAAO,sBAAuB3d,IAC5CrJ,KAAK6mB,SAAW7mB,KAAK0nB,aACd1nB,KAAK8oB,c,kDAIczf,GAE1B,OAAIrJ,KAAKknB,cACPlnB,KAAKknB,cAAe,EACblnB,KAAKkqB,kBAAkB7gB,IAGb,MAAfA,EAAMlH,KACDnC,KAAKgnB,OAAO,yCAA0C3d,GACxDrJ,KAAKkqB,oB,0CAIM7gB,GAClB,IAAIohB,EACJ,OAAQphB,EAAMlH,MACd,IAAK,MACL,IAAK,WACH,QAAiDH,KAA5CyoB,EAASzqB,KAAKuoB,YAAYlf,GAAO,IACpC,MACJ,QACE,OAAOrJ,KAAKgnB,OAAL,qBAA0B3d,EAAMlH,MAAQkH,GAkBjD,OAfKrJ,KAAK+lB,sBAKc,OAAlB/lB,KAAK6mB,SACP7mB,KAAKgpB,MAAMhpB,KAAK2kB,QAAU3kB,KAAKgiB,aAAchiB,KAAK8mB,WACvC9mB,KAAK6mB,SAAW7mB,KAAK0nB,aAAc1nB,KAAK0qB,mBAGnD1qB,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAK0pB,SACpB1pB,KAAK6mB,SAAW7mB,KAAK0nB,aAAc1nB,KAAK0qB,mBAErD1qB,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAKwpB,UAAWiB,EAAQzqB,KAAK0qB,oBAZvD1qB,KAAK4mB,YAAY6D,EAAOtH,IAAMnjB,KAAKioB,YAAYjoB,KAAK0nB,aAAarmB,OAc5DrB,KAAK2qB,6B,iDAIathB,GAEzB,MAAmB,MAAfA,EAAMlH,KACDnC,KAAKkoB,qBAIRloB,KAAK+lB,uBACP/lB,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAK0pB,SAAU1pB,KAAK6nB,QAAS7nB,KAAK0qB,mBAC5D1qB,KAAK6mB,SAAW,MAGlB7mB,KAAK+pB,cAAgB/pB,KAAK6oB,uBACnB7oB,KAAK+pB,cAAc1gB,M,qCAKfuhB,GAEb,OADA5qB,KAAK6qB,WAAaD,EACX5qB,KAAK8qB,Y,gCAIJzhB,GACR,OAAQA,EAAMlH,MAEd,IAAK,IAAK,OAAOnC,KAAK+qB,iBAEtB,IAAK,IAAK,OAAO/qB,KAAKgrB,kBAEtB,QACE,IAAM1B,EAAQtpB,KAAK0kB,cAAe6E,EAASD,EAAMxoB,QAAUwoB,EAAMA,EAAMxoB,OAAS,GAEhF,GAAIyoB,GAA0B,SAAhBA,EAAOpnB,KAAiB,CAEpC,IAAMqH,EAAOxJ,KAAK6mB,SAElB7mB,KAAKkpB,kBAELlpB,KAAKgpB,MAAMhpB,KAAK6mB,SAAU7mB,KAAKwpB,UAAWhgB,EAAMxJ,KAAK2kB,QAEvD,OAAO3kB,KAAK6qB,WAAWxhB,M,uCAKVA,GACf,IAAI6a,EAASC,EACP9J,EAASra,KAAK0nB,aAEpB,QAA8C1lB,KAAzCmiB,EAAYnkB,KAAKuoB,YAAYlf,IAUlC,OAPwB,OAApBrJ,KAAK8mB,YACP5C,EAAUlkB,KAAK6mB,SAAU7mB,KAAK6mB,SAAWxM,IAGzC6J,EAAUlkB,KAAK+mB,QAAU/mB,KAAK+mB,QAAW1M,GAE3Cra,KAAKgpB,MAAM9E,EAASC,EAAW9J,EAAQra,KAAK2kB,QACrC3kB,KAAK8qB,Y,wCAIIzhB,GAChB,IACI8a,EAAW9J,EADT6J,EAAUlkB,KAAK0nB,aAGrB,QAA8C1lB,KAAzCmiB,EAAYnkB,KAAKuoB,YAAYlf,IAUlC,OAPwB,OAApBrJ,KAAK8mB,YACPzM,EAASra,KAAK6mB,SAAU7mB,KAAK6mB,SAAW3C,IAGxC7J,EAASra,KAAK+mB,QAAU/mB,KAAK+mB,QAAW7C,GAE1ClkB,KAAKgpB,MAAM9E,EAASC,EAAW9J,EAAQra,KAAK2kB,QACrC3kB,KAAK8qB,Y,8CAIUzhB,GACtB,MAAmB,OAAfA,EAAMlH,KAEJnC,KAAKylB,gBAAkC,OAAhBzlB,KAAK2kB,aAA+D3iB,KAA3ChC,KAAK2kB,OAAS3kB,KAAKuoB,YAAYlf,IAC1ErJ,KAAKirB,iBACPjrB,KAAKgnB,OAAL,iCAAsChnB,KAAK+mB,QAAQ5D,GAAnD,KAA0D9Z,GAE5DrJ,KAAKirB,iBAAiB5hB,K,uCAIdA,GACf,GAAmB,OAAfA,EAAMlH,KACR,OAAOnC,KAAKgnB,OAAL,8BAAmC3d,EAAMlH,MAAQkH,GAE1D,IAAMgY,EAAOrhB,KAAKkrB,MAAMlrB,KAAK6mB,SAAU7mB,KAAK8mB,WAAY9mB,KAAK+mB,QAC3D/mB,KAAK2kB,QAAU3kB,KAAKgiB,cAGtB,OAFAhiB,KAAKkpB,kBAEiB,OAAlBlpB,KAAK6mB,UACP7mB,KAAK6mB,SAAWxF,EACTrhB,KAAKwlB,iBAIZxlB,KAAK+mB,QAAU1F,EACRrhB,KAAK6oB,0B,6CAMd,IAAMsC,EAAenrB,KAAK0kB,cAC1B,IAAKyG,EAAarqB,OAChB,OAAOd,KAAK+nB,iBAEd,OAAQoD,EAAaA,EAAarqB,OAAS,GAAGqB,MAC9C,IAAK,QACH,OAAOnC,KAAK0oB,mBACd,IAAK,OACH,OAAO1oB,KAAK8nB,cACd,IAAK,UACH,OAAO9nB,KAAKiqB,iBACd,IAAK,KACH,OAAOjqB,KAAKorB,2B,4BAKVlH,EAASC,EAAW9J,EAAQiH,GAChCthB,KAAKinB,UAAU,KAAMjnB,KAAKkrB,MAAMhH,EAASC,EAAW9J,EAAQiH,GAASthB,KAAKgiB,iB,6BAIrE3iB,EAASgK,GACd,IAAMwB,EAAM,IAAItL,MAAJ,UAAaF,EAAb,oBAAgCgK,EAAMb,KAAtC,MACZqC,EAAIC,QAAU,CACZzB,MAAOA,EACPb,KAAMa,EAAMb,KACZc,cAAetJ,KAAK6lB,OAAOvc,eAE7BtJ,KAAKinB,UAAUpc,GACf7K,KAAKinB,UAAYjb,I,kCAIPuV,GACV,MAAO,uBAAuB5Y,KAAK4Y,GAAOA,EAAMvhB,KAAK2lB,oBAAoBpE,K,0CAKvDA,GAElB,IAAKA,EAAIzgB,OACP,OAAOd,KAAKkmB,MAEd,OAAQ3E,EAAI,IAEZ,IAAK,IAAK,OAAOvhB,KAAKkmB,MAAQ3E,EAE9B,IAAK,IAAK,OAAOvhB,KAAKkmB,MAAMrkB,QAAQ,aAAc0f,GAElD,IAAK,IAEH,OAAmB,MAAXA,EAAI,GAAavhB,KAAKqmB,YAAcrmB,KAAKomB,WAAapmB,KAAKqrB,mBAAmB9J,GAExF,QAEE,MAAQ,WAAW5Y,KAAK4Y,GAAQ,KAAOvhB,KAAKqrB,mBAAmBrrB,KAAKmmB,UAAY5E,M,yCAKjEA,GAEjB,IAAK,uBAAuB5Y,KAAK4Y,GAC/B,OAAOA,EAMT,IAHA,IAAMzgB,EAASygB,EAAIzgB,OACfwqB,EAAS,GAAItqB,GAAK,EAAGuqB,GAAa,EAAGC,EAAe,EAAGtZ,EAAO,IAE3DlR,EAAIF,GAAQ,CACjB,OAAQoR,GAER,IAAK,IACH,GAAIqZ,EAAY,GAEG,MAAbhK,IAAMvgB,IAA2B,MAAbugB,IAAMvgB,GAE5B,MAAQuqB,EAAYvqB,EAAI,GAAKF,GAA6B,MAAnBygB,EAAIgK,IACzCvqB,EAAIuqB,EAEV,MAEF,IAAK,IACL,IAAK,IACHvqB,EAAIF,EACJ,MAEF,IAAK,IACH,GAAmB,MAAfygB,EAAIvgB,EAAI,GAEV,OADAkR,EAAOqP,EAAU,KAAJvgB,IAGb,IAAK,IACHsqB,GAAU/J,EAAItf,UAAUupB,EAAcxqB,EAAI,GAC1CwqB,EAAexqB,EAAI,EACnB,MAEF,UAAKgB,EACL,IAAK,IACL,IAAK,IACH,OAAOspB,EAAS/J,EAAItf,UAAUupB,EAAcxqB,GAAKugB,EAAI3f,OAAOZ,EAAI,GAElE,IAAK,IAEH,QAAagB,KADbkQ,EAAOqP,EAAU,KAAJvgB,KACsB,MAATkR,GAAyB,MAATA,GAAyB,MAATA,EAAc,CAMtE,IAHKsZ,GAFLF,GAAU/J,EAAItf,UAAUupB,EAAcxqB,EAAI,IAEfuiB,YAAY,OAASgI,IAC9CD,EAASA,EAAO1pB,OAAO,EAAG4pB,IAEf,MAATtZ,EACF,MAAO,GAAP,OAAUoZ,EAAV,YAAoB/J,EAAI3f,OAAOZ,EAAI,IACrCwqB,EAAexqB,EAAI,IAK3BkR,EAAOqP,IAAMvgB,GAEf,OAAOsqB,EAAS/J,EAAItf,UAAUupB,K,4BAM1BtjB,EAAOujB,EAAcC,GAAgB,WAazC,GAVA1rB,KAAK+pB,cAAgB/pB,KAAKkqB,kBAC1BlqB,KAAKknB,cAAe,EACpBlnB,KAAK0mB,UAAYvmB,OAAOC,OAAO,MAC/BJ,KAAK0mB,UAAUxM,EAAIla,KAAK4lB,iBAAmB5lB,KAAK4lB,iBAAiBhkB,OAAO,GAArD,WAC4B4iB,IAD5B,KAEnBxkB,KAAKsqB,gBAAkBoB,GAAkB1f,EACzChM,KAAKwmB,mBAAoB,EACzBxmB,KAAK4mB,YAAczmB,OAAOC,OAAO,OAG5BqrB,EAAc,CACjB,IACI1gB,EADE4gB,EAAQ,GAMd,GAJA3rB,KAAKinB,UAAY,SAAC/b,EAAGC,GAAQD,EAAKH,EAAQG,EAAKC,GAAKwgB,EAAM7oB,KAAKqI,IAC/DnL,KAAK6lB,OAAO+F,SAAS1jB,GAAO2jB,OAAM,SAAAxiB,GAChC,OAAO,EAAK0gB,cAAgB,EAAKA,cAAc1gB,MAE7C0B,EAAO,MAAMA,EACjB,OAAO4gB,EAIT3rB,KAAKinB,UAAYwE,EACjBzrB,KAAK6lB,OAAO+F,SAAS1jB,GAAO,SAAC6C,EAAO1B,GACpB,OAAV0B,GACF,EAAKkc,UAAUlc,GAAQ,EAAKkc,UAAYjb,GACjC,EAAK+d,gBACZ,EAAKA,cAAgB,EAAKA,cAAc1gB,U,+CAt8B5Cmb,EAAkB,M,KA48BtB,SAASxY,KAGT,SAAS8Y,EAAgBgH,EAAQtK,GAE/B,IAAMM,EAAYN,EAAQM,UAC1BgK,EAAOrE,WAAe3F,EACtBgK,EAAOpE,WAAelG,EAAQc,UAC9BwJ,EAAOxD,SAAe9G,EAAQkB,QAC9BoJ,EAAO5kB,UAAesa,EAAQgB,SAC9BsJ,EAAOZ,MAAe1J,EAAQH,KAC9ByK,EAAO9J,aAAeR,EAAQwB,eAG9B8I,EAAOtC,UAAa1H,EAAU/b,IAAWZ,IAAIE,OAC7CymB,EAAOpC,SAAa5H,EAAU/b,IAAWZ,IAAIG,MAC7CwmB,EAAOjE,QAAa/F,EAAU/b,IAAWZ,IAAIC,KAC7C0mB,EAAO3D,UAAarG,EAAU/b,IAAWL,EAAEE,QAC3CkmB,EAAO9D,WAAalG,EAAU/b,IAAWL,EAAEC,SAC3CmmB,EAAOrD,cAAgB,CACrB,EAAK3G,EAAU/b,IAAWZ,IAAIhD,MAC9B,IAAK2f,EAAU/b,IAAWP,IAAIC,QAC9B,IAAKqc,EAAU/b,IAAWF,IAAIC,UAEhCgmB,EAAOpB,kBAAoB5I,EAAU,sBAEvCgD,EAAgBL,EAASvkB,UAAW6hB,GC9gCpC,IAAMC,EAAeD,EAAciB,eAE3B7d,EAAaY,IAAbZ,IAAKN,EAAQkB,IAARlB,IAGPknB,EAAY,4CACdC,EAAY,+DACZC,EAAoB,CAClB,KAAM,OAAQ,IAAK,MAAO,KAAM,MAChC,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,KAAM,OAI7CC,E,uKAIF,OAAO,M,GAJkBhJ,GASRiJ,E,WACnB,WAAYC,EAAc/oB,GAWxB,GAXiC,oBAEjCrD,KAAKqsB,aAAe,MAGhBD,GAA8C,oBAAvBA,EAAa9a,QACtCjO,EAAU+oB,EAAcA,EAAe,MACzC/oB,EAAUA,GAAW,GACrBrD,KAAKssB,OAASjpB,EAAQkpB,MAGjBH,EASHpsB,KAAKwsB,cAAgBJ,EACrBpsB,KAAKysB,gBAA6BzqB,IAAhBqB,EAAQY,OAA6BZ,EAAQY,QAV9C,CACjB,IAAIyoB,EAAS,GACb1sB,KAAKwsB,cAAgB,CACnBlb,MADmB,SACbb,EAAON,EAAU4L,GAAQ2Q,GAAUjc,EAAOsL,GAAQA,KACxD9X,IAAK,SAAA8X,GAAUA,GAAQA,EAAK,KAAM2Q,KAEpC1sB,KAAKysB,YAAa,EAQpBzsB,KAAK6mB,SAAW,KACV,eAAgBle,KAAKtF,EAAQ0hB,SAQjC/kB,KAAKwH,WAAY,EACjBxH,KAAK2sB,WAAa3sB,KAAK4sB,iBARvB5sB,KAAKwH,WAAY,EACjBxH,KAAK2kB,OAAS3C,EACdhiB,KAAK6sB,SAAWxpB,EAAQwhB,QACxB7kB,KAAK8sB,YAAc3sB,OAAOC,OAAO,MACjCiD,EAAQoe,UAAYzhB,KAAK+sB,YAAY1pB,EAAQoe,W,mDAgB1Cvc,EAAQ8C,GACbhI,KAAKwsB,cAAclb,MAAMpM,EAAQ,OAAQ8C,K,iCAIhCkc,EAASC,EAAW9J,EAAQiH,EAAOvF,GAC5C,IAEOuF,EAAMgD,OAAOtkB,KAAK2kB,UAErB3kB,KAAKkZ,QAA0B,OAAlBlZ,KAAK6mB,SAAoB,GAAM7mB,KAAKgtB,gBAAkB,MAAQ,UAC9DhL,EAAasC,OAAOhD,GAAS,GAA7B,UAAqCthB,KAAKitB,kBAAkB3L,GAA5D,UACbthB,KAAK2kB,OAASrD,EACdthB,KAAK6mB,SAAW,MAGd3C,EAAQI,OAAOtkB,KAAK6mB,UAElB1C,EAAUG,OAAOtkB,KAAK8mB,YACxB9mB,KAAKkZ,OAAL,YAAiBlZ,KAAKktB,cAAc7S,IAAW0B,GAG/C/b,KAAKkZ,OAAL,iBACYlZ,KAAKmtB,iBAAiBntB,KAAK8mB,WAAa3C,GADpD,YAEYnkB,KAAKktB,cAAc7S,IAAW0B,GAI5C/b,KAAKkZ,OAAL,WAAkC,OAAlBlZ,KAAK6mB,SAAoB,GAAK,OAClC7mB,KAAKotB,eAAeptB,KAAK6mB,SAAW3C,GADhD,YAEYlkB,KAAKmtB,iBAAiBntB,KAAK8mB,WAAa3C,GAFpD,YAGYnkB,KAAKktB,cAAc7S,IAAW0B,GAE9C,MAAOhR,GAASgR,GAAQA,EAAKhR,M,qCAIhBmZ,EAASC,EAAW9J,EAAQiH,EAAOvF,UAEzC/b,KAAKqtB,aACZrtB,KAAKkZ,OAAOlZ,KAAKstB,aAAapJ,EAASC,EAAW9J,EAAQiH,GAAQvF,K,mCAIvDmI,EAASC,EAAW9J,EAAQiH,GACvC,gBAAWthB,KAAKotB,eAAelJ,GAA/B,YACQlkB,KAAKitB,kBAAkB9I,GAD/B,YAEQnkB,KAAKktB,cAAc7S,IAF3B,OAGWiH,GAASA,EAAMjgB,MAAf,WAA2BrB,KAAKitB,kBAAkB3L,GAAlD,QAAiE,U,oCAIhEqK,GAAO,WACnB,OAAOA,EAAM5qB,KAAI,SAAAoK,GACf,OAAO,EAAKmiB,aAAaniB,EAAE+Y,QAAS/Y,EAAEgZ,UAAWhZ,EAAEkP,OAAQlP,EAAEmW,UAC5DlgB,KAAK,M,qCAIKqpB,GACb,MAA2B,SAApBA,EAAO1J,SACZ/gB,KAAKutB,YAAY9C,GAAUzqB,KAAKitB,kBAAkBxC,K,wCAIpCA,GAEhB,GAAwB,cAApBA,EAAO1J,SAIT,OAFI/gB,KAAKssB,QAAW7B,EAAOppB,SAASrB,KAAKssB,SACvC7B,EAASzqB,KAAKopB,KAAKppB,KAAKssB,OAAO7B,EAAOppB,SACjC,OAAQopB,EAASA,EAAOtH,GAAxB,YAAkCsH,EAAOppB,OAElD,IAAIkgB,EAAMkJ,EAAOppB,MAEbrB,KAAK6sB,UAAYtL,EAAIiM,WAAWxtB,KAAK6sB,YACvCtL,EAAMA,EAAI3f,OAAO5B,KAAK6sB,SAAS/rB,SAE7BirB,EAAOpjB,KAAK4Y,KACdA,EAAMA,EAAI1f,QAAQmqB,EAAWyB,IAE/B,IAAMC,EAAc1tB,KAAKqsB,aAAa9jB,KAAKgZ,GAC3C,OAAQmM,EACCA,EAAY,GAAW1tB,KAAK8sB,YAAYY,EAAY,IAAMA,EAAY,GAArDnM,EADnB,WAAmBA,EAAnB,O,qCAKMmB,GAEb,IAAIrhB,EAAQqhB,EAAQrhB,MAKpB,GAJI0qB,EAAOpjB,KAAKtH,KACdA,EAAQA,EAAMQ,QAAQmqB,EAAWyB,IAG/B/K,EAAQW,SACV,MAAO,IAAP,OAAWhiB,EAAX,aAAqBqhB,EAAQW,UAG/B,GAAIrjB,KAAKwH,WAEP,GAAIkb,EAAQG,SAASxhB,QAAUwD,EAAIK,OACjC,MAAO,IAAP,OAAW7D,EAAX,UAIF,OAAQqhB,EAAQG,SAASxhB,OACzB,KAAKwD,EAAIK,OACP,iBAAW7D,EAAX,KACF,KAAKwD,EAAIE,QACP,GAAc,SAAV1D,GAA8B,UAAVA,EACtB,OAAOA,EACT,MACF,KAAKwD,EAAII,QACP,GAAI,aAAa0D,KAAKtH,GACpB,OAAOA,EACT,MACF,KAAKwD,EAAIC,QACP,GAAI,kBAAkB6D,KAAKtH,GACzB,OAAOA,EACT,MACF,KAAKwD,EAAIG,OACP,GAAI,yCAAyC2D,KAAKtH,GAChD,OAAOA,EAMb,iBAAWA,EAAX,cAAsBrB,KAAKitB,kBAAkBvK,EAAQG,a,uCAItCsB,GACf,OAAOA,EAAU9iB,QAAU8D,EAAIhD,KAAO,IAAMnC,KAAKitB,kBAAkB9I,K,oCAIvD9J,GACZ,OAAQA,EAAO0G,UACf,IAAK,OACH,OAAO/gB,KAAKutB,YAAYlT,GAC1B,IAAK,UACH,OAAOra,KAAK2tB,eAAetT,GAC7B,QACE,OAAOra,KAAKitB,kBAAkB5S,M,qCAKiB,IAArC6J,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,UAAW9J,EAAiB,EAAjBA,OAAQiH,EAAS,EAATA,MACxC,kBACEthB,KAAKotB,eAAelJ,GADtB,YAEElkB,KAAKmtB,iBAAiBhJ,GAFxB,YAGEnkB,KAAKktB,cAAc7S,IAHrB,OAIE8G,EAAeG,GAAS,GAAxB,WAAiCthB,KAAKitB,kBAAkB3L,IAJ1D,Q,sCASA,MAAM,IAAI/hB,MAAM,sD,8BAIV2kB,EAASC,EAAW9J,EAAQiH,EAAOvF,QAE1B/Z,IAAXqY,EACFra,KAAK2sB,WAAWzI,EAAQA,QAASA,EAAQC,UAAWD,EAAQ7J,OAAQ6J,EAAQ5C,MAAO6C,GAE3D,oBAAV7C,EACdthB,KAAK2sB,WAAWzI,EAASC,EAAW9J,EAAQ2H,EAAcV,GAG1DthB,KAAK2sB,WAAWzI,EAASC,EAAW9J,EAAQiH,GAASU,EAAcjG,K,+BAI9D4P,GACP,IAAK,IAAI3qB,EAAI,EAAGA,EAAI2qB,EAAM7qB,OAAQE,IAChChB,KAAK4tB,QAAQjC,EAAM3qB,M,gCAIb0H,EAAQ6Y,EAAKxF,GACrB,IAAM0F,EAAW,GACjBA,EAAS/Y,GAAU6Y,EACnBvhB,KAAK+sB,YAAYtL,EAAU1F,K,kCAIjB0F,EAAU1F,GAEpB,IAAK/b,KAAK8sB,YACR,OAAO/Q,GAAQA,IAGjB,IAAI8R,GAAc,EAClB,IAAK,IAAInlB,KAAU+Y,EAAU,CAC3B,IAAIF,EAAME,EAAS/Y,GACA,kBAAR6Y,IACTA,EAAMA,EAAIlgB,OACZwsB,GAAc,EAEQ,OAAlB7tB,KAAK6mB,WACP7mB,KAAKkZ,OAAOlZ,KAAKgtB,gBAAkB,MAAQ,SAC3ChtB,KAAK6mB,SAAW,KAAM7mB,KAAK2kB,OAAS,IAGtC3kB,KAAK8sB,YAAYvL,GAAQ7Y,GAAU,IACnC1I,KAAKkZ,OAAL,kBAAuBxQ,EAAvB,aAAkC6Y,EAAlC,SAGF,GAAIsM,EAAa,CACf,IAAIC,EAAU,GAAIC,EAAa,GAC/B,IAAK,IAAMC,KAAahuB,KAAK8sB,YAC3BgB,GAAWA,EAAU,IAAH,OAAOE,GAAcA,EACvCD,IAAeA,EAAa,IAAM,IAAM/tB,KAAK8sB,YAAYkB,GAE3DF,EAAUA,EAAQjsB,QAAQ,0BAA2B,QACrD7B,KAAKqsB,aAAe,IAAI1kB,OAAO,cAAOomB,EAAP,wBACKD,EADL,iCAIjC9tB,KAAKkZ,OAAO2U,EAAc,KAAO,GAAI9R,K,4BAIjCoI,EAAW9J,GACf,IAA0B4T,EAAOntB,EAA7BotB,EAAW/J,EAWf,YATkBniB,IAAdmiB,EACF+J,EAAW,GAEJ/J,EAAUpD,SACjBmN,EAAW,CAAC,CAAE/J,UAAWA,EAAW9J,OAAQA,IAEnC,WAAY8J,IACrB+J,EAAW,CAAC/J,IAENrjB,EAASotB,EAASptB,QAE1B,KAAK,EACH,OAAO,IAAIorB,EAAe,MAE5B,KAAK,EAEH,MADA+B,EAAQC,EAAS,IACL7T,kBAAkB6R,GAC5B,OAAO,IAAIA,EAAJ,YAAwBlsB,KAAKmtB,iBAAiBc,EAAM9J,WAApD,YACmBnkB,KAAKktB,cAAce,EAAM5T,QAD5C,OAGX,QAGE,IAFA,IAAI8T,EAAW,IAENntB,EAAI,EAAGA,EAAIF,EAAQE,KAC1BitB,EAAQC,EAASltB,IAEPmjB,UAAUG,OAAOH,GACzBgK,GAAY,KAAJ,OAASnuB,KAAKktB,cAAce,EAAM5T,UAG1C8T,GAAY,GAAJ,QAAQntB,EAAI,QAAU,QAClBhB,KAAKmtB,iBAAiBc,EAAM9J,WADhC,YAEInkB,KAAKktB,cAAce,EAAM5T,SACrC8J,EAAY8J,EAAM9J,WAGtB,OAAO,IAAI+H,EAAJ,UAAsBiC,EAAtB,W,2BAKNC,GAEH,IADA,IAAMttB,EAASstB,GAAYA,EAASttB,QAAU,EAAGqtB,EAAW,IAAIxtB,MAAMG,GAC7DE,EAAI,EAAGA,EAAIF,EAAQE,IAC1BmtB,EAASntB,GAAKhB,KAAKktB,cAAckB,EAASptB,IAC5C,OAAO,IAAIkrB,EAAJ,WAAuBiC,EAAS/sB,KAAK,KAArC,Q,0BAIL2a,GAEoB,OAAlB/b,KAAK6mB,WACP7mB,KAAKkZ,OAAOlZ,KAAKgtB,gBAAkB,MAAQ,SAC3ChtB,KAAK6mB,SAAW,MAGlB7mB,KAAKkZ,OAASlZ,KAAKquB,cAGnB,IAAIC,EAAavS,GAAS,SAAChR,EAAOugB,GAAagD,EAAa,KAAMvS,EAAKhR,EAAOugB,IAC9E,GAAItrB,KAAKysB,WACP,IAAM,OAAOzsB,KAAKwsB,cAAcvoB,IAAIqqB,GACpC,MAAOvjB,IAETujB,GAAcA,M,sCAzSd,OAAOtM,EAAasC,OAAOtkB,KAAK2kB,Y,KA8SpC,SAAS8I,EAAkBc,GAEzB,IAAIjD,EAASW,EAAkBsC,GAc/B,YAbevsB,IAAXspB,IAEuB,IAArBiD,EAAUztB,QACZwqB,EAASiD,EAAUC,WAAW,GAAGC,SAAS,IAC1CnD,EAAS,UAAU1pB,OAAO,EAAG,EAAI0pB,EAAOxqB,QAAUwqB,IAIlDA,GAA+C,MAApCiD,EAAUC,WAAW,GAAK,OAC1BD,EAAUC,WAAW,GAAK,MAAQC,SAAS,IACtDnD,EAAS,cAAc1pB,OAAO,EAAG,GAAK0pB,EAAOxqB,QAAUwqB,IAGpDA,E,+BC/XYoD,G,WACnB,WAAY/C,EAAOtoB,GAAS,oBAE1BrD,KAAK2uB,MAAQ,EAEb3uB,KAAK4uB,QAAUzuB,OAAOC,OAAO,MAG7BJ,KAAK6uB,IAAM,EACX7uB,KAAK8uB,KAAO3uB,OAAOC,OAAO,MAC1BJ,KAAK8uB,KAAK,MAAQ,EAClB9uB,KAAK+uB,UAAY5uB,OAAOC,OAAO,MAE/BJ,KAAKgvB,gBAAkB,EAGlB3rB,IAAWsoB,GAAUA,EAAM,KAC9BtoB,EAAUsoB,EAAOA,EAAQ,MAC3BtoB,EAAUA,GAAW,GACrBrD,KAAKivB,SAAW5rB,EAAQme,SAAWO,EAG/B4J,GACF3rB,KAAKkvB,SAASvD,G,wDA2BNwD,EAAQC,EAAMC,EAAMC,GAE9B,IAAMC,EAASJ,EAAOC,KAAUD,EAAOC,GAAQ,IACzCI,EAASD,EAAOF,KAAUE,EAAOF,GAAQ,IAEzCI,EAAUH,KAAQE,EAGxB,OAFKC,IACHD,EAAOF,GAAQ,OACTG,I,uCAION,EAAQC,EAAMC,EAAMC,GAEnC,IAAMC,EAASJ,EAAOC,GAAOI,EAASD,EAAOF,GAI7C,IAAK,IAAMxsB,YAHJ2sB,EAAOF,GAGIE,EAAQ,OAE1B,IAAK,IAAM3sB,YADJ0sB,EAAOF,GACIE,EAAQ,cACnBJ,EAAOC,K,mCAaHD,EAAQC,EAAMC,EAAMC,EAAMI,EAAOC,EAAOC,EAAOtO,EAAOtZ,EAAU6nB,GAC3E,IAAIC,EAAKP,EAAQC,EAGbO,GADcX,GAAQC,GAAQC,EACN,EAAInvB,OAAOwC,KAAK3C,KAAK8uB,MAAQ9uB,KAAK+uB,UAI9D,IAAK,IAAMiB,KADPZ,KAAOU,EAAMX,EAAQA,EAAS,IAAIC,GAAQU,EAAIV,IAC7BD,EAAQ,CAC3B,IAAMc,EAAUF,EAAWC,GAE3B,GAAIT,EAASJ,EAAOa,GAGlB,IAAK,IAAME,KADPb,KAAOS,EAAMP,EAAQA,EAAS,IAAIF,GAAQS,EAAIT,IAC7BE,EAAQ,CAC3B,IAAMY,EAAUJ,EAAWG,GAE3B,GAAIV,EAASD,EAAOW,GAIlB,IAFA,IAAME,GAASd,EAAQA,KAAQE,EAAS,CAACF,GAAQ,GAAMnvB,OAAOwC,KAAK6sB,IAE1Dhc,EAAI,EAAGA,EAAI4c,EAAOtvB,OAAQ0S,IAAK,CACtC,IAAM6c,EAAQ,CAAEnM,QAAS,KAAMC,UAAW,KAAM9J,OAAQ,MACxDgW,EAAMX,GAAS9L,EAAWqM,EAASjwB,KAAKivB,UACxCoB,EAAMV,GAAS/L,EAAWuM,EAASnwB,KAAKivB,UACxCoB,EAAMT,GAAShM,EAAWmM,EAAWK,EAAO5c,IAAKxT,KAAKivB,UACtD,IAAM5N,EAAOrhB,KAAKivB,SAAS5N,KACzBgP,EAAMnM,QAASmM,EAAMlM,UAAWkM,EAAMhW,OAAQuJ,EAAWtC,EAAOthB,KAAKivB,WACvE,GAAIY,EACFA,EAAM/sB,KAAKue,QACR,GAAIrZ,EAASqZ,GAChB,OAAO,IAMnB,OAAOwO,I,4BAIHV,EAAQnnB,GACZ,IAAK,IAAMonB,KAAQD,EACjBnnB,EAASonB,K,kCAIDD,EAAQC,EAAMpnB,GACxB,IAAIunB,EAAQF,EACZ,GAAIE,EAASJ,EAAOC,GAClB,IAAKC,KAAQE,EACXvnB,EAASqnB,K,kCAKHF,EAAQE,EAAMrnB,GACxB,IAAIonB,EACJ,IAAKA,KAAQD,EACFA,EAAOC,GACLC,IACTrnB,EAASonB,K,mCAKFD,EAAQC,EAAMC,EAAMrnB,GAC/B,IAAIunB,EAAQC,EAAQF,EACpB,IAAKC,EAASJ,EAAOC,MAAWI,EAASD,EAAOF,IAC9C,IAAKC,KAAQE,EACXxnB,EAASsnB,K,oCAODH,EAAQC,EAAMC,EAAMC,GAChC,IAAeQ,EAAKP,EAAQC,EAAxB9V,EAAQ,EAIZ,IAAK,IAAMsW,KADPZ,KAAOU,EAAMX,EAAQA,EAAS,IAAIC,GAAQU,EAAIV,IAC7BD,EACnB,GAAII,EAASJ,EAAOa,GAGlB,IAAK,IAAME,KADPb,KAAOS,EAAMP,EAAQA,EAAS,IAAIF,GAAQS,EAAIT,IAC7BE,GACfC,EAASD,EAAOW,MAEdZ,EAAOA,KAAQE,GAAW9V,IAEzBA,GAASvZ,OAAOwC,KAAK6sB,GAAQ1uB,QAK1C,OAAO4Y,I,iCAKE4H,GACT,IAAKgP,GAAShP,GACZ,OAAOthB,KAAK4uB,QACd,IAAM2B,EAAS,GAEf,OADAA,EAAOjP,GAASthB,KAAK4uB,QAAQtN,GACtBiP,I,sCAKOvoB,GAAU,WAClBwoB,EAAYrwB,OAAOC,OAAO,MAChC,OAAO,SAAA+iB,GACCA,KAAMqN,IACVA,EAAUrN,IAAM,EAChBnb,EAAS4b,EAAW,EAAKmL,UAAU5L,GAAK,EAAK8L,e,8BAS3C/K,EAASC,EAAW9J,EAAQiH,GAE7B6C,IACH7C,EAAQ4C,EAAQ5C,MAAOjH,EAAS6J,EAAQ7J,OACtC8J,EAAYD,EAAQC,UAAWD,EAAUA,EAAQA,SAGrDA,EAAUF,EAASE,GACnBC,EAAYH,EAASG,GACrB9J,EAAS2J,EAAS3J,GAClBiH,EAAQ0C,EAAS1C,GAGjB,IAAImP,EAAYzwB,KAAK4uB,QAAQtN,GAExBmP,IACHA,EAAYzwB,KAAK4uB,QAAQtN,GAAS,CAAEoP,SAAU,GAAIC,WAAY,GAAIC,QAAS,IAG3EzwB,OAAO0wB,OAAOJ,IAMhB,IAAMK,EAAM9wB,KAAK8uB,KACXiC,EAAW/wB,KAAK+uB,UACtB7K,EAAY4M,EAAI5M,KAAe4M,EAAIC,IAAW/wB,KAAK6uB,KAAO3K,GAAalkB,KAAK6uB,KAC5E1K,EAAY2M,EAAI3M,KAAe2M,EAAIC,IAAW/wB,KAAK6uB,KAAO1K,GAAankB,KAAK6uB,KAC5ExU,EAAYyW,EAAIzW,KAAeyW,EAAIC,IAAW/wB,KAAK6uB,KAAOxU,GAAara,KAAK6uB,KAE5E,IAAMmC,EAAUhxB,KAAKixB,YAAYR,EAAUC,SAAYxM,EAAWC,EAAW9J,GAM7E,OALAra,KAAKixB,YAAYR,EAAUE,WAAYxM,EAAW9J,EAAW6J,GAC7DlkB,KAAKixB,YAAYR,EAAUG,QAAYvW,EAAW6J,EAAWC,GAG7DnkB,KAAK2uB,MAAQ,KACNqC,I,+BAIArF,GACP,IAAK,IAAI3qB,EAAI,EAAGA,EAAI2qB,EAAM7qB,OAAQE,IAChChB,KAAK4tB,QAAQjC,EAAM3qB,M,6BAIhBkL,GAAQ,WAEb,OADAA,EAAOX,GAAG,QAAQ,SAAA8V,GAAU,EAAKuM,QAAQvM,MAClCnV,I,iCAIEgY,EAASC,EAAW9J,EAAQiH,GAEhC6C,IACH7C,EAAQ4C,EAAQ5C,MAAOjH,EAAS6J,EAAQ7J,OACtC8J,EAAYD,EAAQC,UAAWD,EAAUA,EAAQA,SAGrDA,EAAUF,EAASE,GACnBC,EAAYH,EAASG,GACrB9J,EAAS2J,EAAS3J,GAClBiH,EAAQ0C,EAAS1C,GAIjB,IACImP,EAAWC,EAAUC,EADnBG,EAAM9wB,KAAK8uB,KAAMyB,EAASvwB,KAAK4uB,QAErC,KAAM1K,EAAa4M,EAAI5M,OAAeC,EAAY2M,EAAI3M,OAChD9J,EAAayW,EAAIzW,OAAeoW,EAAYF,EAAOjP,OACnDoP,EAAaD,EAAUC,SAASxM,OAChCyM,EAAaD,EAASvM,OACtB9J,KAAUsW,GACd,OAAO,EAST,IAAKzM,KANLlkB,KAAKkxB,iBAAiBT,EAAUC,SAAYxM,EAAWC,EAAW9J,GAClEra,KAAKkxB,iBAAiBT,EAAUE,WAAYxM,EAAW9J,EAAW6J,GAClElkB,KAAKkxB,iBAAiBT,EAAUG,QAAYvW,EAAW6J,EAAWC,GAC/C,OAAfnkB,KAAK2uB,OAAgB3uB,KAAK2uB,QAGd8B,EAAUC,SAAU,OAAO,EAE3C,cADOH,EAAOjP,IACP,I,kCAIGqK,GACV,IAAK,IAAI3qB,EAAI,EAAGA,EAAI2qB,EAAM7qB,OAAQE,IAChChB,KAAKmxB,WAAWxF,EAAM3qB,M,6BAInBkL,GAAQ,WAEb,OADAA,EAAOX,GAAG,QAAQ,SAAA8V,GAAU,EAAK8P,WAAW9P,MACrCnV,I,oCAKKgY,EAASC,EAAW9J,EAAQiH,GACxC,OAAOthB,KAAKoxB,OAAOpxB,KAAK6I,MAAMqb,EAASC,EAAW9J,EAAQiH,M,kCAIhDA,GACV,OAAOthB,KAAKqxB,cAAc,KAAM,KAAM,KAAM/P,K,+BAKrC4C,EAASC,EAAW9J,EAAQiH,GAEnC4C,EAAUA,GAAWF,EAASE,GAC9BC,EAAYA,GAAaH,EAASG,GAClC9J,EAASA,GAAU2J,EAAS3J,GAC5BiH,EAAQA,GAAS0C,EAAS1C,GAE1B,IACIrP,EAASqf,EAAWC,EAAaC,EAD/B7F,EAAQ,GAAI4E,EAASvwB,KAAKyxB,WAAWnQ,GAAQwP,EAAM9wB,KAAK8uB,KAI9D,GAAIwB,GAASpM,MAAgBoN,EAAcR,EAAI5M,KAC3CoM,GAASnM,MAAgBoN,EAAcT,EAAI3M,KAC3CmM,GAASjW,MAAgBmX,EAAcV,EAAIzW,IAC7C,OAAOsR,EAET,IAAK,IAAM+F,KAAWnB,GAEhBte,EAAUse,EAAOmB,MAEfJ,EACEE,EAEFxxB,KAAK2xB,aAAa1f,EAAQ2e,QAASY,EAAUF,EAAWC,EACtC,SAAU,UAAW,YAAaG,EAAS,KAAM/F,GAGnE3rB,KAAK2xB,aAAa1f,EAAQye,SAAUY,EAAWC,EAAa,KAC1C,UAAW,YAAa,SAAUG,EAAS,KAAM/F,GAE9D4F,EAEPvxB,KAAK2xB,aAAa1f,EAAQ0e,WAAYY,EAAaC,EAAU,KAC3C,YAAa,SAAU,UAAWE,EAAS,KAAM/F,GAC5D6F,EAEPxxB,KAAK2xB,aAAa1f,EAAQ2e,QAASY,EAAU,KAAM,KACjC,SAAU,UAAW,YAAaE,EAAS,KAAM/F,GAGnE3rB,KAAK2xB,aAAa1f,EAAQye,SAAU,KAAM,KAAM,KAC9B,UAAW,YAAa,SAAUgB,EAAS,KAAM/F,IAGzE,OAAOA,I,4BAKHzH,EAASC,EAAW9J,EAAQiH,GAAO,WACjCpV,EAAS,IAAIlJ,YAAS,CAAEgM,YAAY,IAS1C,OANA9C,EAAOmE,MAAQ,WAAM,qBACA,EAAKuhB,SAAS1N,EAASC,EAAW9J,EAAQiH,IAD1C,IACnB,gCAAWD,EAAX,QACEnV,EAAOpJ,KAAKue,IAFK,8BAGnBnV,EAAOpJ,KAAK,OAGPoJ,I,iCAKEgY,EAASC,EAAW9J,EAAQiH,GAErC4C,EAAUA,GAAWF,EAASE,GAC9BC,EAAYA,GAAaH,EAASG,GAClC9J,EAASA,GAAU2J,EAAS3J,GAC5BiH,EAAQA,GAAS0C,EAAS1C,GAE1B,IACerP,EAASqf,EAAWC,EAAaC,EAD1CjB,EAASvwB,KAAKyxB,WAAWnQ,GAAQwP,EAAM9wB,KAAK8uB,KAC9CpV,EAAQ,EAGZ,GAAI4W,GAASpM,MAAgBoN,EAAcR,EAAI5M,KAC3CoM,GAASnM,MAAgBoN,EAAcT,EAAI3M,KAC3CmM,GAASjW,MAAgBmX,EAAcV,EAAIzW,IAC7C,OAAO,EAET,IAAK,IAAMqX,KAAWnB,GAEhBte,EAAUse,EAAOmB,MAKfhY,GAHAwK,EACE7J,EAEOra,KAAK6xB,cAAc5f,EAAQ2e,QAASY,EAAUF,EAAWC,GAGzDvxB,KAAK6xB,cAAc5f,EAAQye,SAAUY,EAAWC,EAAaC,GAEjErN,EAEEnkB,KAAK6xB,cAAc5f,EAAQ0e,WAAYY,EAAaC,EAAUF,GAI9DtxB,KAAK6xB,cAAc5f,EAAQ2e,QAASY,EAAUF,EAAWC,IAIxE,OAAO7X,I,8BAKD1R,EAAUkc,EAASC,EAAW9J,EAAQiH,GAC5CthB,KAAK8xB,MAAK,SAAAzQ,GAER,OADArZ,EAASqZ,IACF,IACN6C,EAASC,EAAW9J,EAAQiH,K,4BAM3BtZ,EAAUkc,EAASC,EAAW9J,EAAQiH,GAC1C,IAAIwQ,GAAO,EACLjG,GAAS7rB,KAAK8xB,MAAK,SAAAzQ,GAEvB,OADAyQ,GAAO,GACC9pB,EAASqZ,KAChB6C,EAASC,EAAW9J,EAAQiH,GAC/B,OAAOwQ,GAAQjG,I,2BAMZ7jB,EAAUkc,EAASC,EAAW9J,EAAQiH,GAEzC4C,EAAUA,GAAWF,EAASE,GAC9BC,EAAYA,GAAaH,EAASG,GAClC9J,EAASA,GAAU2J,EAAS3J,GAC5BiH,EAAQA,GAAS0C,EAAS1C,GAE1B,IACIrP,EAASqf,EAAWC,EAAaC,EAD/BjB,EAASvwB,KAAKyxB,WAAWnQ,GAAQwP,EAAM9wB,KAAK8uB,KAIlD,GAAIwB,GAASpM,MAAgBoN,EAAcR,EAAI5M,KAC3CoM,GAASnM,MAAgBoN,EAAcT,EAAI3M,KAC3CmM,GAASjW,MAAgBmX,EAAcV,EAAIzW,IAC7C,OAAO,EAET,IAAK,IAAMqX,KAAWnB,EAEpB,GAAIte,EAAUse,EAAOmB,GAEnB,GAAIJ,GACF,GAAIE,GAEF,GAAIxxB,KAAK2xB,aAAa1f,EAAQ2e,QAASY,EAAUF,EAAWC,EACtC,SAAU,UAAW,YAAaG,EAAS1pB,EAAU,MACzE,OAAO,OAIT,GAAIhI,KAAK2xB,aAAa1f,EAAQye,SAAUY,EAAWC,EAAa,KAC1C,UAAW,YAAa,SAAUG,EAAS1pB,EAAU,MACzE,OAAO,OAER,GAAIupB,GAEP,GAAIvxB,KAAK2xB,aAAa1f,EAAQ0e,WAAYY,EAAaC,EAAU,KAC3C,YAAa,SAAU,UAAWE,EAAS1pB,EAAU,MACzE,OAAO,OAGN,GAAIwpB,GAEP,GAAIxxB,KAAK2xB,aAAa1f,EAAQ2e,QAASY,EAAU,KAAM,KACjC,SAAU,UAAW,YAAaE,EAAS1pB,EAAU,MACzE,OAAO,OAKX,GAAIhI,KAAK2xB,aAAa1f,EAAQye,SAAU,KAAM,KAAM,KAC9B,UAAW,YAAa,SAAUgB,EAAS1pB,EAAU,MACzE,OAAO,EAIb,OAAO,I,kCAKGmc,EAAW9J,EAAQiH,GAC7B,IAAMyQ,EAAU,GAEhB,OADA/xB,KAAKgyB,aAAY,SAAAnU,GAAOkU,EAAQjvB,KAAK+a,KAAOsG,EAAW9J,EAAQiH,GACxDyQ,I,kCAKG/pB,EAAUmc,EAAW9J,EAAQiH,GAEvC6C,EAAYA,GAAaH,EAASG,GAClC9J,EAASA,GAAU2J,EAAS3J,GAC5BiH,EAAQA,GAAS0C,EAAS1C,GAE1B,IACIrP,EAASsf,EAAaC,EADpBV,EAAM9wB,KAAK8uB,KAAMyB,EAASvwB,KAAKyxB,WAAWnQ,GAKhD,GAHAtZ,EAAWhI,KAAKiyB,gBAAgBjqB,KAG5BsoB,GAASnM,MAAgBoN,EAAcT,EAAI3M,KAC3CmM,GAASjW,MAAgBmX,EAAcV,EAAIzW,KAG/C,IAAKiH,KAASiP,GAERte,EAAUse,EAAOjP,MAEfiQ,EACEC,EAEFxxB,KAAKkyB,aAAajgB,EAAQ0e,WAAYY,EAAaC,EAAUxpB,GAG7DhI,KAAKmyB,YAAYlgB,EAAQye,SAAUa,EAAavpB,GAE3CwpB,EAEPxxB,KAAKoyB,YAAYngB,EAAQ2e,QAASY,EAAUxpB,GAG5ChI,KAAKqyB,MAAMpgB,EAAQye,SAAU1oB,M,oCAOvBkc,EAAS7J,EAAQiH,GAC7B,IAAMyQ,EAAU,GAEhB,OADA/xB,KAAKsyB,eAAc,SAAAvgB,GAAOggB,EAAQjvB,KAAKiP,KAAOmS,EAAS7J,EAAQiH,GACxDyQ,I,oCAKK/pB,EAAUkc,EAAS7J,EAAQiH,GAEvC4C,EAAUA,GAAWF,EAASE,GAC9B7J,EAASA,GAAU2J,EAAS3J,GAC5BiH,EAAQA,GAAS0C,EAAS1C,GAE1B,IACIrP,EAASqf,EAAWE,EADlBV,EAAM9wB,KAAK8uB,KAAMyB,EAASvwB,KAAKyxB,WAAWnQ,GAKhD,GAHAtZ,EAAWhI,KAAKiyB,gBAAgBjqB,KAG5BsoB,GAASpM,MAAcoN,EAAYR,EAAI5M,KACvCoM,GAASjW,MAAcmX,EAAYV,EAAIzW,KAG3C,IAAKiH,KAASiP,GAERte,EAAUse,EAAOjP,MAEfgQ,EACEE,EAEFxxB,KAAKkyB,aAAajgB,EAAQ2e,QAASY,EAAUF,EAAWtpB,GAGxDhI,KAAKoyB,YAAYngB,EAAQye,SAAUY,EAAWtpB,GAEzCwpB,EAEPxxB,KAAKmyB,YAAYlgB,EAAQ0e,WAAYa,EAAUxpB,GAG/ChI,KAAKqyB,MAAMpgB,EAAQ0e,WAAY3oB,M,iCAO5Bkc,EAASC,EAAW7C,GAC7B,IAAMyQ,EAAU,GAEhB,OADA/xB,KAAKuyB,YAAW,SAAAC,GAAOT,EAAQjvB,KAAK0vB,KAAOtO,EAASC,EAAW7C,GACxDyQ,I,iCAKE/pB,EAAUkc,EAASC,EAAW7C,GAEvC4C,EAAUA,GAAWF,EAASE,GAC9BC,EAAYA,GAAaH,EAASG,GAClC7C,EAAQA,GAAS0C,EAAS1C,GAE1B,IACIrP,EAASqf,EAAWC,EADlBT,EAAM9wB,KAAK8uB,KAAMyB,EAASvwB,KAAKyxB,WAAWnQ,GAKhD,GAHAtZ,EAAWhI,KAAKiyB,gBAAgBjqB,KAG5BsoB,GAASpM,MAAgBoN,EAAcR,EAAI5M,KAC3CoM,GAASnM,MAAgBoN,EAAcT,EAAI3M,KAG/C,IAAK7C,KAASiP,GAERte,EAAUse,EAAOjP,MAEfgQ,EACEC,EAEFvxB,KAAKkyB,aAAajgB,EAAQye,SAAUY,EAAWC,EAAavpB,GAG5DhI,KAAKmyB,YAAYlgB,EAAQ2e,QAASU,EAAWtpB,GAExCupB,EAEPvxB,KAAKoyB,YAAYngB,EAAQ0e,WAAYY,EAAavpB,GAGlDhI,KAAKqyB,MAAMpgB,EAAQ2e,QAAS5oB,M,gCAO1Bkc,EAASC,EAAW9J,GAC5B,IAAM0X,EAAU,GAEhB,OADA/xB,KAAKyyB,WAAU,SAAAC,GAAOX,EAAQjvB,KAAK4vB,KAAOxO,EAASC,EAAW9J,GACvD0X,I,gCAKC/pB,EAAUkc,EAASC,EAAW9J,GACtC,IAAK,IAAMiH,KAASthB,KAAK4uB,QACvB5uB,KAAK8xB,MAAK,SAAAzQ,GAER,OADArZ,EAASqZ,EAAKC,QACP,IACN4C,EAASC,EAAW9J,EAAQiH,K,sCAKnBqR,GACd,IAAIpyB,EAAM0U,EAEV,GAAI0d,EAEF,IADApyB,EAAOoyB,EAAgB,KAAH,OAAQA,GAAiB1d,EAAQ,EAC9CjV,KAAK8uB,KAAKvuB,IACfA,EAAOoyB,EAAgB1d,SAIzB,GAAK1U,EAAO,MAAH,OAASP,KAAKgvB,yBAChBhvB,KAAK8uB,KAAKvuB,IAKnB,OAFAP,KAAK8uB,KAAKvuB,KAAUP,KAAK6uB,IACzB7uB,KAAK+uB,UAAU/uB,KAAK6uB,KAAOtuB,EACpBP,KAAKivB,SAAS3M,UAAU/hB,EAAKqB,OAAO,M,qCAKe,oEAAJ,GAAI,IAA7CwvB,cAA6C,aAA7BwB,oBAA6B,SACpDrG,EAAQ,GACRsG,EAAUD,EAAgB,kBAAM,GACvB,SAACE,EAAMzzB,GAAc,MAAM,IAAIE,MAAJ,UAAauzB,EAAKzxB,MAAlB,YAA2BhC,KAG/D0zB,EAAQ/yB,KAAK4xB,SAAS,KAAM7rB,IAAWZ,IAAIG,KAAMS,IAAWZ,IAAIC,IAAK,MACrE4tB,EAAW5B,EAAS,YAAI2B,GAAS,GAsFvC,OArFAA,EAAMtU,SAAQ,SAAAwU,GASZ,IARA,IAEIjhB,EACAkhB,EAHEC,EAAQ,GACVC,GAAY,EAGV9R,EAAQ2R,EAAS3R,MAGnBtH,EAAUiZ,EAAS/O,QAChBlK,IAAYoZ,GAAW,CAM5B,IALA,IAAMC,EAAc,EAAKzB,SAAS,KAAM,KAAM5X,EAAS,MACjDsZ,EAAe,EAAK1B,SAAS5X,EAAS,KAAM,KAAM,MACpDqH,OAAI,EAAEhc,EAAQ,KAAMC,EAAO,KAAMikB,EAAS,KAGrCvoB,EAAI,EAAGA,EAAIsyB,EAAaxyB,SAAWsyB,EAAWpyB,KACrDqgB,EAAOiS,EAAatyB,IACVsgB,MAAMgD,OAAOhD,GAEdtP,EACPohB,EAAYP,EAAQ7Y,EAAS,yBAGtBqH,EAAK8C,UAAU9iB,QAAU0E,IAAWZ,IAAIE,MAC3CA,EACF+tB,EAAYP,EAAQ7Y,EAAS,+BAE7BgZ,EAASlwB,KAAKuC,EAAQgc,GAIjBA,EAAK8C,UAAU9iB,QAAU0E,IAAWZ,IAAIG,KAC3CA,EACF8tB,EAAYP,EAAQ7Y,EAAS,8BAE7BgZ,EAASlwB,KAAKwC,EAAO+b,GAIhBgS,EAAYvyB,OACnBsyB,EAAYP,EAAQ7Y,EAAS,gCAE7BhI,EAAOqP,EACP6R,EAAU,WAzBVE,EAAYP,EAAQ7Y,EAAS,gCA+BjC,IAAK,IAAIhZ,EAAI,EAAGA,EAAIqyB,EAAYvyB,SAAWsyB,IAAapyB,EACtDqgB,EAAOgS,EAAYryB,GACfgR,EACFohB,EAAYP,EAAQ7Y,EAAS,2BAEtBqH,EAAK8C,UAAU9iB,QAAU0E,IAAWZ,IAAIG,KAC3CikB,EACF6J,EAAYP,EAAQ7Y,EAAS,8BAE7BuP,EAASlI,GAGXrP,EAAOqP,EACP6R,EAAU,UAKT7tB,EAGH8tB,EAAM1hB,QAAQpM,EAAMgV,QAFpB+Y,EAAYP,EAAQ7Y,EAAS,oBAG/BA,EAAUuP,GAAUA,EAAOrF,QAIzBkP,EACFhC,GAAS,EAEFpf,IACPua,EAAMva,EAAKkhB,GAAS7xB,OAAS8xB,MAI7B/B,GACFpxB,KAAKuzB,YAAYP,GACZzG,I,2BAjvBP,IAAIiH,EAAOxzB,KAAK2uB,MAChB,GAAa,OAAT6E,EACF,OAAOA,EAGTA,EAAO,EACP,IACI9C,EAAUxM,EADRqM,EAASvwB,KAAK4uB,QAEpB,IAAK,IAAM6E,KAAYlD,EACrB,IAAK,IAAMmD,KAAehD,EAAWH,EAAOkD,GAAU/C,SACpD,IAAK,IAAMiD,KAAiBzP,EAAUwM,EAASgD,GAC7CF,GAAQrzB,OAAOwC,KAAKuhB,EAAQyP,IAAe7yB,OACjD,OAAOd,KAAK2uB,MAAQ6E,M,KA0uBxB,SAASlD,GAASzS,GAChB,MAAoB,kBAANA,GAAkBA,aAAa5c,O,ICvxB1B2yB,G,kDACnB,WAAYvwB,GAAS,MAMfwwB,EAAQC,EANO,4BACnB,cAAM,CAAE5b,eAAe,KAClB3T,eAAeyK,YAAa,EAGlB,IAAIyV,EAASphB,GAErB0wB,MAAM,CACXxoB,GAAI,SAACqJ,EAAO5M,GACV,OAAQ4M,GACR,IAAK,OAAQif,EAAS7rB,EAAU,MAChC,IAAK,MAAS8rB,EAAQ9rB,MAKxB,SAAC+C,EAAOsW,GAAWtW,GAAS,EAAKyG,KAAK,QAASzG,IAAUsW,GAAQ,EAAKve,KAAKue,MAE3E,SAAC3Y,EAAQsrB,GAAU,EAAKxiB,KAAK,SAAU9I,EAAQsrB,MAIjD,EAAKpY,WAAa,SAACnL,EAAON,EAAU4L,GAAW8X,EAAOpjB,GAAQsL,KAC9D,EAAKD,OAAS,SAAAC,GAAU+X,IAAS/X,KAvBd,E,mDA2Bd7P,GAAQ,WAIb,OAHAA,EAAOX,GAAG,QAAS,SAAAkF,GAAW,EAAKa,MAAMb,MACzCvE,EAAOX,GAAG,OAAS,WAAa,EAAKtH,SACrCiI,EAAOX,GAAG,SAAS,SAAAR,GAAW,EAAKyG,KAAK,QAASzG,MAC1C/K,S,GAhCiC2L,cCAvBsoB,G,kDACnB,WAAY5wB,GAAS,2BACnB,cAAM,CAAE8M,SAAU,UACbxM,eAAeqL,YAAa,EAGjC,IAAMklB,EAAS,EAAKC,QAAU,IAAIhI,EAAS,CACzC7a,MAAO,SAAC+P,EAAMlR,EAAUnI,GAAe,EAAKlF,KAAKue,GAAOrZ,GAAYA,KACpE/D,IAAK,SAAA+D,GAAc,EAAKlF,KAAK,MAAOkF,GAAYA,MAC/C3E,GARgB,OAWnB,EAAKuY,WAAa,SAACyF,EAAMlR,EAAU4L,GAAWmY,EAAOtG,QAAQvM,EAAMtF,IACnE,EAAKD,OAAS,SAAAC,GAAUmY,EAAOjwB,IAAI8X,IAZhB,E,mDAgBd7P,GAAQ,WAKb,OAJAA,EAAOX,GAAG,QAAU,SAAA8V,GAAU,EAAK/P,MAAM+P,MACzCnV,EAAOX,GAAG,OAAU,WAAQ,EAAKtH,SACjCiI,EAAOX,GAAG,SAAU,SAAAR,GAAW,EAAKyG,KAAK,QAASzG,MAClDmB,EAAOX,GAAG,UAAU,SAAC7C,EAAQ6Y,GAAU,EAAK4S,QAAQC,UAAU1rB,EAAQ6Y,MAC/DvhB,S,GAtBiC2L","file":"static/js/3.e6a7fde1.chunk.js","sourcesContent":["'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    const outputComments = this._comments;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (outputComments && (comment = this._comment.exec(input)))\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const token = { line: line, type: type, value: value, prefix: prefix };\n      callback(null, token);\n      this.previousToken = token;\n      this._previousMarker = type;\n      // Advance to next part to tokenize\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = input;\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._input = '';\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (this._input !== null)\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","module.exports = require('events').EventEmitter;\n","'use strict'; // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};","'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(globalThis)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('util'),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();","'use strict';\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = require('./end-of-stream');\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;","module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this.subject   = subject;\n    this.predicate = predicate;\n    this.object    = object;\n    this.graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this.subject.toJSON(),\n      predicate: this.predicate.toJSON(),\n      object:    this.object.toJSON(),\n      graph:     this.graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this.subject.equals(other.subject)     &&\n                      this.predicate.equals(other.predicate) &&\n                      this.object.equals(other.object)       &&\n                      this.graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      subject: subject, predicate: predicate, object: object,\n      graph: graph, type: type,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext() {\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext();\n    // If the blank node was the subject, continue reading the predicate\n    if (this._object === null)\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n    // If the blank node was the object, restore previous context and read punctuation\n    else\n      return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext();\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext();\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext();\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext();\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._baseIRI = options.baseIRI;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\n      iri = iri.substr(this._baseIRI.length);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    let tmp, index1, index2;\n    // Depending on the number of variables, keys or reverse index are faster\n    const varCount = !key0 + !key1 + !key2,\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      const entity0 = entityKeys[value0];\n\n      if (index1 = index0[value0]) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          const entity1 = entityKeys[value1];\n\n          if (index2 = index1[value1]) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              const parts = { subject: null, predicate: null, object: null };\n              parts[name0] = termFromId(entity0, this._factory);\n              parts[name1] = termFromId(entity1, this._factory);\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              const quad = this._factory.quad(\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\n              if (array)\n                array.push(quad);\n              else if (callback(quad))\n                return true;\n            }\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    return this.remove(this.match(subject, predicate, object, graph));\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return quads;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId, null, quads);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId, null, quads);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId, null, quads);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId, null, quads);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId, null, quads);\n      }\n    }\n    return quads;\n  }\n\n  // ### `match` returns a stream of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  match(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    // Initialize stream once it is being read\n    stream._read = () => {\n      for (const quad of this.getQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return stream;\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return false;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n          // If subject and object are given, the object index will be the fastest\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                                  'object', 'subject', 'predicate', graphId, callback, null))\n              return true;\n          }\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\n                                  'subject', 'predicate', 'object', graphId, callback, null))\n              return true;\n        }\n        else if (predicateId) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          if (this._findInIndex(content.objects, objectId, null, null,\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else\n        // If nothing is given, iterate subjects and predicates first\n        if (this._findInIndex(content.subjects, null, null, null,\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8' });\n    this._writableState.objectMode = true;\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n"],"sourceRoot":""}